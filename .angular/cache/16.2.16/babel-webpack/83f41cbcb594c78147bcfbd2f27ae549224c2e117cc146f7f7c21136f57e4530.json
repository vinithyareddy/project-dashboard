{"ast":null,"code":"import { collection, addDoc, updateDoc, deleteDoc, doc, getDocs } from '@angular/fire/firestore';\nimport { from, of, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"./auth.service\";\nexport let FirestoreService = /*#__PURE__*/(() => {\n  class FirestoreService {\n    constructor(firestore, authService) {\n      this.firestore = firestore;\n      this.authService = authService;\n    }\n    getCollectionPath(type) {\n      return this.authService.getUser().pipe(switchMap(user => {\n        if (user?.uid) {\n          return of(`users/${user.uid}/${type}`);\n        }\n        return of('');\n      }));\n    }\n    // --------------------- TASKS ---------------------\n    addTask(task) {\n      return this.getCollectionPath('tasks').pipe(switchMap(path => from(addDoc(collection(this.firestore, path), task))));\n    }\n    updateTask(taskId, updates) {\n      return this.getCollectionPath('tasks').pipe(switchMap(path => from(updateDoc(doc(this.firestore, `${path}/${taskId}`), updates))));\n    }\n    deleteTask(taskId) {\n      return this.getCollectionPath('tasks').pipe(switchMap(path => from(deleteDoc(doc(this.firestore, `${path}/${taskId}`)))));\n    }\n    getTasks() {\n      return this.getCollectionPath('tasks').pipe(switchMap(path => from(getDocs(collection(this.firestore, path))).pipe(switchMap(snapshot => {\n        const tasks = snapshot.docs.map(docSnap => {\n          const data = docSnap.data();\n          return {\n            id: docSnap.id,\n            ...data,\n            dueDate: data['dueDate']?.toDate?.() || data['dueDate']\n          };\n        });\n        return of(tasks);\n      }))));\n    }\n    // --------------------- PROJECTS ---------------------\n    addProject(project) {\n      return this.getCollectionPath('projects').pipe(switchMap(path => from(addDoc(collection(this.firestore, path), project))));\n    }\n    updateProject(projectId, updates) {\n      return this.getCollectionPath('projects').pipe(switchMap(path => from(updateDoc(doc(this.firestore, `${path}/${projectId}`), updates))));\n    }\n    deleteProject(projectId) {\n      return this.getCollectionPath('projects').pipe(switchMap(path => from(deleteDoc(doc(this.firestore, `${path}/${projectId}`)))));\n    }\n    getProjects() {\n      return this.getCollectionPath('projects').pipe(switchMap(path => from(getDocs(collection(this.firestore, path))).pipe(switchMap(snapshot => {\n        const projects = snapshot.docs.map(docSnap => {\n          const data = docSnap.data();\n          return {\n            id: docSnap.id,\n            ...data,\n            dueDate: data['dueDate']?.toDate?.() || data['dueDate']\n          };\n        });\n        return of(projects);\n      }))));\n    }\n    // --------------------- TEAMS ---------------------\n    addTeamMember(member) {\n      return this.getCollectionPath('teams').pipe(switchMap(path => from(addDoc(collection(this.firestore, path), member))));\n    }\n    updateTeamMember(memberId, updates) {\n      return this.getCollectionPath('teams').pipe(switchMap(path => from(updateDoc(doc(this.firestore, `${path}/${memberId}`), updates))));\n    }\n    deleteTeamMember(memberId) {\n      return this.getCollectionPath('teams').pipe(switchMap(path => from(deleteDoc(doc(this.firestore, `${path}/${memberId}`)))));\n    }\n    getTeamMembers() {\n      return this.getCollectionPath('teams').pipe(switchMap(path => from(getDocs(collection(this.firestore, path))).pipe(switchMap(snapshot => {\n        const members = snapshot.docs.map(docSnap => ({\n          id: docSnap.id,\n          ...docSnap.data()\n        }));\n        return of(members);\n      }))));\n    }\n    static {\n      this.ɵfac = function FirestoreService_Factory(t) {\n        return new (t || FirestoreService)(i0.ɵɵinject(i1.Firestore), i0.ɵɵinject(i2.AuthService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: FirestoreService,\n        factory: FirestoreService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return FirestoreService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}