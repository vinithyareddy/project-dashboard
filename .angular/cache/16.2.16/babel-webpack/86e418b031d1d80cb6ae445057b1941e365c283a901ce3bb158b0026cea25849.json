{"ast":null,"code":"import _asyncToGenerator from \"/Users/vinithyareddy/Desktop/projects/my github projects/project-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\n// auth.component.ts - enhanced with name, phone, validation, and messages\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { RouterModule } from '@angular/router';\nexport let AuthComponent = class AuthComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.isRegisterMode = false;\n    this.errorMsg = '';\n    this.authForm = this.fb.group({\n      name: [''],\n      phone: [''],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['']\n    });\n  }\n  ngOnInit() {\n    this.authService.getUser().subscribe(user => {\n      if (user) {\n        this.router.navigate(['/dashboard']);\n      }\n    });\n  }\n  toggleMode() {\n    this.isRegisterMode = !this.isRegisterMode;\n    this.errorMsg = '';\n  }\n  onSubmit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.authForm.invalid) return;\n      const {\n        name,\n        phone,\n        email,\n        password,\n        confirmPassword\n      } = _this.authForm.value;\n      if (_this.isRegisterMode && password !== confirmPassword) {\n        _this.errorMsg = '❌ Passwords do not match';\n        return;\n      }\n      try {\n        if (_this.isRegisterMode) {\n          yield _this.authService.registerWithProfile({\n            name,\n            phone,\n            email,\n            password\n          });\n          _this.errorMsg = '✅ Account has been created';\n        } else {\n          yield _this.authService.login(email, password);\n        }\n        _this.router.navigate(['/dashboard']);\n      } catch (err) {\n        const errorCode = err.code || '';\n        switch (errorCode) {\n          case 'auth/invalid-login-credentials':\n          case 'auth/user-not-found':\n          case 'auth/wrong-password':\n            _this.errorMsg = '❌ Invalid Credentials';\n            break;\n          case 'auth/email-already-in-use':\n            _this.errorMsg = '❌ Email already in use';\n            break;\n          case 'auth/too-many-requests':\n            _this.errorMsg = '❌ Too many attempts. Try again later.';\n            break;\n          default:\n            _this.errorMsg = err.message || '❌ An unexpected error occurred';\n        }\n      }\n    })();\n  }\n};\nAuthComponent = __decorate([Component({\n  selector: 'app-auth',\n  standalone: true,\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss'],\n  imports: [CommonModule, ReactiveFormsModule, MatButtonModule, MatFormFieldModule, MatInputModule, RouterModule]\n})], AuthComponent);","map":{"version":3,"names":["Component","CommonModule","ReactiveFormsModule","Validators","MatButtonModule","MatFormFieldModule","MatInputModule","RouterModule","AuthComponent","constructor","fb","authService","router","isRegisterMode","errorMsg","authForm","group","name","phone","email","required","password","minLength","confirmPassword","ngOnInit","getUser","subscribe","user","navigate","toggleMode","onSubmit","_this","_asyncToGenerator","invalid","value","registerWithProfile","login","err","errorCode","code","message","__decorate","selector","standalone","templateUrl","styleUrls","imports"],"sources":["/Users/vinithyareddy/Desktop/projects/my github projects/project-dashboard/src/app/auth/auth/auth.component.ts"],"sourcesContent":["// auth.component.ts - enhanced with name, phone, validation, and messages\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { RouterModule, Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-auth',\n  standalone: true,\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss'],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    RouterModule\n  ]\n})\nexport class AuthComponent implements OnInit {\n  authForm: FormGroup;\n  isRegisterMode = false;\n  errorMsg = '';\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.authForm = this.fb.group({\n      name: [''],\n      phone: [''],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['']\n    });\n  }\n\n  ngOnInit(): void {\n    this.authService.getUser().subscribe(user => {\n      if (user) {\n        this.router.navigate(['/dashboard']);\n      }\n    });\n  }\n\n  toggleMode() {\n    this.isRegisterMode = !this.isRegisterMode;\n    this.errorMsg = '';\n  }\n\n  async onSubmit() {\n    if (this.authForm.invalid) return;\n    const { name, phone, email, password, confirmPassword } = this.authForm.value;\n\n    if (this.isRegisterMode && password !== confirmPassword) {\n      this.errorMsg = '❌ Passwords do not match';\n      return;\n    }\n\n    try {\n      if (this.isRegisterMode) {\n        await this.authService.registerWithProfile({ name, phone, email, password });\n        this.errorMsg = '✅ Account has been created';\n      } else {\n        await this.authService.login(email, password);\n      }\n      this.router.navigate(['/dashboard']);\n    } catch (err: any) {\n      const errorCode = err.code || '';\n      switch (errorCode) {\n        case 'auth/invalid-login-credentials':\n        case 'auth/user-not-found':\n        case 'auth/wrong-password':\n          this.errorMsg = '❌ Invalid Credentials';\n          break;\n        case 'auth/email-already-in-use':\n          this.errorMsg = '❌ Email already in use';\n          break;\n        case 'auth/too-many-requests':\n          this.errorMsg = '❌ Too many attempts. Try again later.';\n          break;\n        default:\n          this.errorMsg = err.message || '❌ An unexpected error occurred';\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}