{"ast":null,"code":"import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from '@angular/fire/auth';\nimport { BehaviorSubject } from 'rxjs';\nimport { authState } from 'rxfire/auth';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nexport class AuthService {\n  constructor(auth) {\n    this.auth = auth;\n    this.userSubject = new BehaviorSubject(null);\n    // Tracks user login/logout state\n    onAuthStateChanged(this.auth, user => this.userSubject.next(user));\n  }\n  // Emits user state to components\n  getUser() {\n    return this.userSubject.asObservable();\n  }\n  // Shortcut method for components that want latest Firebase-auth observable directly\n  getUserObservable() {\n    return authState(this.auth); // Useful for async pipes\n  }\n\n  login(email, password) {\n    return signInWithEmailAndPassword(this.auth, email, password);\n  }\n  register(email, password) {\n    return createUserWithEmailAndPassword(this.auth, email, password);\n  }\n  logout() {\n    return signOut(this.auth);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.Auth));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","BehaviorSubject","authState","AuthService","constructor","auth","userSubject","user","next","getUser","asObservable","getUserObservable","login","email","password","register","logout","i0","ɵɵinject","i1","Auth","factory","ɵfac","providedIn"],"sources":["/Users/vinithyareddy/Desktop/projects/my github projects/project-dashboard/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Auth,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n  User\n} from '@angular/fire/auth';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { authState } from 'rxfire/auth';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private userSubject = new BehaviorSubject<User | null>(null);\n\n  constructor(private auth: Auth) {\n    // Tracks user login/logout state\n    onAuthStateChanged(this.auth, user => this.userSubject.next(user));\n  }\n\n  // Emits user state to components\n  getUser(): Observable<User | null> {\n    return this.userSubject.asObservable();\n  }\n\n  // Shortcut method for components that want latest Firebase-auth observable directly\n  getUserObservable(): Observable<User | null> {\n    return authState(this.auth); // Useful for async pipes\n  }\n\n  login(email: string, password: string) {\n    return signInWithEmailAndPassword(this.auth, email, password);\n  }\n\n  register(email: string, password: string) {\n    return createUserWithEmailAndPassword(this.auth, email, password);\n  }\n\n  logout() {\n    return signOut(this.auth);\n  }\n}\n"],"mappings":"AACA,SAEEA,8BAA8B,EAC9BC,0BAA0B,EAC1BC,OAAO,EACPC,kBAAkB,QAEb,oBAAoB;AAC3B,SAASC,eAAe,QAAoB,MAAM;AAClD,SAASC,SAAS,QAAQ,aAAa;;;AAGvC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAU;IAAV,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,WAAW,GAAG,IAAIL,eAAe,CAAc,IAAI,CAAC;IAG1D;IACAD,kBAAkB,CAAC,IAAI,CAACK,IAAI,EAAEE,IAAI,IAAI,IAAI,CAACD,WAAW,CAACE,IAAI,CAACD,IAAI,CAAC,CAAC;EACpE;EAEA;EACAE,OAAOA,CAAA;IACL,OAAO,IAAI,CAACH,WAAW,CAACI,YAAY,EAAE;EACxC;EAEA;EACAC,iBAAiBA,CAAA;IACf,OAAOT,SAAS,CAAC,IAAI,CAACG,IAAI,CAAC,CAAC,CAAC;EAC/B;;EAEAO,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAOhB,0BAA0B,CAAC,IAAI,CAACO,IAAI,EAAEQ,KAAK,EAAEC,QAAQ,CAAC;EAC/D;EAEAC,QAAQA,CAACF,KAAa,EAAEC,QAAgB;IACtC,OAAOjB,8BAA8B,CAAC,IAAI,CAACQ,IAAI,EAAEQ,KAAK,EAAEC,QAAQ,CAAC;EACnE;EAEAE,MAAMA,CAAA;IACJ,OAAOjB,OAAO,CAAC,IAAI,CAACM,IAAI,CAAC;EAC3B;;;uBA5BWF,WAAW,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,IAAA;IAAA;EAAA;;;aAAXjB,WAAW;MAAAkB,OAAA,EAAXlB,WAAW,CAAAmB,IAAA;MAAAC,UAAA,EADE;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}