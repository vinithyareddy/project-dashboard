{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { ChangePasswordDialogComponent } from 'src/app/change-password-dialog/change-password-dialog.component';\nimport { RouterModule } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogModule } from '@angular/material/dialog';\nexport let SidebarComponent = class SidebarComponent {\n  constructor(snackBar, authService, dialog, router) {\n    this.snackBar = snackBar;\n    this.authService = authService;\n    this.dialog = dialog;\n    this.router = router;\n    this.isCollapsed = false;\n    this.toggleSidebar = new EventEmitter();\n    this.user$ = this.authService.getUser(); // 🔁 Stream of user data\n  }\n\n  onToggleSidebar() {\n    console.log('SidebarComponent: onToggleSidebar called');\n    this.toggleSidebar.emit();\n  }\n  logout() {\n    this.authService.logout().then(() => this.router.navigate(['/auth']));\n  }\n  openChangePasswordDialog() {\n    this.dialog.open(ChangePasswordDialogComponent, {\n      width: '800px',\n      maxWidth: '95vw',\n      panelClass: 'custom-dialog-container',\n      disableClose: false,\n      autoFocus: true\n    });\n  }\n  showSuccess(message) {\n    this.snackBar.open(message, 'Close', {\n      duration: 4000,\n      panelClass: 'snackbar-success'\n    });\n  }\n  showError(message) {\n    this.snackBar.open(message, 'Close', {\n      duration: 4000,\n      panelClass: 'snackbar-error'\n    });\n  }\n};\n__decorate([Input()], SidebarComponent.prototype, \"isCollapsed\", void 0);\n__decorate([Output()], SidebarComponent.prototype, \"toggleSidebar\", void 0);\nSidebarComponent = __decorate([Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss'],\n  standalone: true,\n  imports: [CommonModule, RouterModule, MatListModule, MatIconModule, MatButtonModule, MatMenuModule, MatSnackBar, MatDialog, MatSnackBarModule, MatDialogModule]\n})], SidebarComponent);","map":{"version":3,"names":["Component","Input","Output","EventEmitter","CommonModule","MatListModule","MatIconModule","MatButtonModule","MatMenuModule","ChangePasswordDialogComponent","RouterModule","MatSnackBar","MatDialog","MatSnackBarModule","MatDialogModule","SidebarComponent","constructor","snackBar","authService","dialog","router","isCollapsed","toggleSidebar","user$","getUser","onToggleSidebar","console","log","emit","logout","then","navigate","openChangePasswordDialog","open","width","maxWidth","panelClass","disableClose","autoFocus","showSuccess","message","duration","showError","__decorate","selector","templateUrl","styleUrls","standalone","imports"],"sources":["/Users/vinithyareddy/Desktop/projects/my github projects/project-dashboard/src/app/sidebar/sidebar.component.ts"],"sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { ChangePasswordDialogComponent } from 'src/app/change-password-dialog/change-password-dialog.component';\nimport { RouterModule, Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AuthService } from '../services/auth.service';\nimport { User } from '@angular/fire/auth';\nimport { Observable } from 'rxjs';\nimport {  MatSnackBarModule } from '@angular/material/snack-bar';\nimport {  MatDialogModule } from '@angular/material/dialog';\n\n\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss'],\n  standalone: true,\n  imports: [CommonModule, RouterModule, MatListModule, MatIconModule, MatButtonModule, MatMenuModule, MatSnackBar, MatDialog , MatSnackBarModule,MatDialogModule ]\n})\nexport class SidebarComponent {\n  user$: Observable<User | null>;\n  @Input() isCollapsed: boolean = false;\n  @Output() toggleSidebar = new EventEmitter<void>();\n\n  constructor( private snackBar: MatSnackBar,\n    private authService: AuthService,\n    private dialog: MatDialog,\n    private router: Router\n  ) {  this.user$ = this.authService.getUser(); // 🔁 Stream of user data\n  }\n\n  onToggleSidebar(): void {\n    console.log('SidebarComponent: onToggleSidebar called');\n    this.toggleSidebar.emit();\n  }\n\n  \n  logout() {\n    this.authService.logout().then(() => this.router.navigate(['/auth']));\n  }\n\n  openChangePasswordDialog() {\n    this.dialog.open(ChangePasswordDialogComponent, {\n      width: '800px',\n      maxWidth: '95vw',\n      panelClass: 'custom-dialog-container',\n      disableClose: false,\n      autoFocus: true\n    });\n  }\n\n  showSuccess(message: string) {\n    this.snackBar.open(message, 'Close', {\n      duration: 4000,\n      panelClass: 'snackbar-success'\n    });\n  }\n\n  showError(message: string) {\n    this.snackBar.open(message, 'Close', {\n      duration: 4000,\n      panelClass: 'snackbar-error'\n    });\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAEC,YAAY,QAAQ,eAAe;AACtE,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,6BAA6B,QAAQ,iEAAiE;AAC/G,SAASC,YAAY,QAAgB,iBAAiB;AACtD,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,SAAS,QAAQ,0BAA0B;AAIpD,SAAUC,iBAAiB,QAAQ,6BAA6B;AAChE,SAAUC,eAAe,QAAQ,0BAA0B;AAUpD,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAK3BC,YAAqBC,QAAqB,EAChCC,WAAwB,EACxBC,MAAiB,EACjBC,MAAc;IAHH,KAAAH,QAAQ,GAARA,QAAQ;IACnB,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,MAAM,GAANA,MAAM;IANP,KAAAC,WAAW,GAAY,KAAK;IAC3B,KAAAC,aAAa,GAAG,IAAInB,YAAY,EAAQ;IAM7C,IAAI,CAACoB,KAAK,GAAG,IAAI,CAACL,WAAW,CAACM,OAAO,EAAE,CAAC,CAAC;EAC9C;;EAEAC,eAAeA,CAAA;IACbC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACvD,IAAI,CAACL,aAAa,CAACM,IAAI,EAAE;EAC3B;EAGAC,MAAMA,CAAA;IACJ,IAAI,CAACX,WAAW,CAACW,MAAM,EAAE,CAACC,IAAI,CAAC,MAAM,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;EACvE;EAEAC,wBAAwBA,CAAA;IACtB,IAAI,CAACb,MAAM,CAACc,IAAI,CAACxB,6BAA6B,EAAE;MAC9CyB,KAAK,EAAE,OAAO;MACdC,QAAQ,EAAE,MAAM;MAChBC,UAAU,EAAE,yBAAyB;MACrCC,YAAY,EAAE,KAAK;MACnBC,SAAS,EAAE;KACZ,CAAC;EACJ;EAEAC,WAAWA,CAACC,OAAe;IACzB,IAAI,CAACvB,QAAQ,CAACgB,IAAI,CAACO,OAAO,EAAE,OAAO,EAAE;MACnCC,QAAQ,EAAE,IAAI;MACdL,UAAU,EAAE;KACb,CAAC;EACJ;EAEAM,SAASA,CAACF,OAAe;IACvB,IAAI,CAACvB,QAAQ,CAACgB,IAAI,CAACO,OAAO,EAAE,OAAO,EAAE;MACnCC,QAAQ,EAAE,IAAI;MACdL,UAAU,EAAE;KACb,CAAC;EACJ;CAED;AA5CUO,UAAA,EAAR1C,KAAK,EAAE,C,oDAA8B;AAC5B0C,UAAA,EAATzC,MAAM,EAAE,C,sDAA0C;AAHxCa,gBAAgB,GAAA4B,UAAA,EAP5B3C,SAAS,CAAC;EACT4C,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,0BAA0B,CAAC;EACvCC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAAC5C,YAAY,EAAEM,YAAY,EAAEL,aAAa,EAAEC,aAAa,EAAEC,eAAe,EAAEC,aAAa,EAAEG,WAAW,EAAEC,SAAS,EAAGC,iBAAiB,EAACC,eAAe;CAC/J,CAAC,C,EACWC,gBAAgB,CA8C5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}