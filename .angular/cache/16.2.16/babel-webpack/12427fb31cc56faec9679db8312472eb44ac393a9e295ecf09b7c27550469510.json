{"ast":null,"code":"import _asyncToGenerator from \"/Users/vinithyareddy/Desktop/projects/my github projects/project-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { RouterModule } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nexport let AuthComponent = class AuthComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.isRegisterMode = false;\n    this.errorMsg = '';\n    this.showPassword = false;\n    this.showConfirm = false;\n    this.authForm = this.fb.group({\n      name: [''],\n      phone: [''],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.minLength(6)]],\n      confirmPassword: [''],\n      rememberMe: [false] // üëà add this line\n    });\n  }\n\n  ngOnInit() {\n    const rememberedEmail = localStorage.getItem('rememberedEmail');\n    if (rememberedEmail) {\n      this.authForm.get('email')?.setValue(rememberedEmail);\n      this.authForm.get('rememberMe')?.setValue(true);\n    }\n    this.authService.getUser().subscribe(user => {\n      if (user) {\n        this.router.navigate(['/dashboard']);\n      }\n    });\n  }\n  toggleMode() {\n    this.isRegisterMode = !this.isRegisterMode;\n    this.errorMsg = '';\n    this.authForm.get('password')?.reset();\n    this.authForm.get('confirmPassword')?.reset();\n  }\n  togglePasswordVisibility() {\n    this.showPassword = !this.showPassword;\n  }\n  toggleConfirmVisibility() {\n    this.showConfirm = !this.showConfirm;\n  }\n  onForgotPassword(event) {\n    event.preventDefault();\n    const email = this.authForm.get('email')?.value;\n    console.log('üì© Forgot password triggered with email:', email); // <-- add this\n    if (!email) {\n      this.errorMsg = '‚ùå Please enter your email to reset password';\n      return;\n    }\n    this.authService.sendPasswordResetEmail(email).then(() => {\n      this.errorMsg = '‚úÖ Password reset link sent to your email';\n    }).catch(err => {\n      const errorCode = err.code || '';\n      switch (errorCode) {\n        case 'auth/invalid-email':\n          this.errorMsg = '‚ùå Invalid email format';\n          break;\n        case 'auth/user-not-found':\n          this.errorMsg = '‚ùå Email not found';\n          break;\n        default:\n          this.errorMsg = '‚ùå Failed to send reset email';\n      }\n    });\n  }\n  onSubmit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        name,\n        phone,\n        email,\n        password,\n        confirmPassword\n      } = _this.authForm.value;\n      if (!email) {\n        _this.errorMsg = '‚ùå Email is required';\n        return;\n      }\n      // Register Flow\n      if (_this.isRegisterMode) {\n        if (!password || password.length < 6) {\n          _this.errorMsg = '‚ùå Password must be at least 6 characters';\n          return;\n        }\n        if (password !== confirmPassword) {\n          _this.errorMsg = '‚ùå Passwords do not match';\n          return;\n        }\n        try {\n          yield _this.authService.registerWithProfile({\n            name,\n            phone,\n            email,\n            password\n          });\n          _this.errorMsg = '‚úÖ Account has been created';\n          _this.router.navigate(['/dashboard']);\n        } catch (err) {\n          _this.handleFirebaseError(err);\n        }\n        return;\n      }\n      // Login Flow\n      if (!password) {\n        _this.errorMsg = '‚ùå Password is required';\n        return;\n      }\n      try {\n        yield _this.authService.login(email, password);\n        // ‚úÖ Remember Me Logic\n        const remember = _this.authForm.get('rememberMe')?.value;\n        if (remember) {\n          localStorage.setItem('rememberedEmail', email);\n        } else {\n          localStorage.removeItem('rememberedEmail');\n        }\n        _this.router.navigate(['/dashboard']);\n      } catch (err) {\n        _this.handleFirebaseError(err);\n      }\n    })();\n  }\n  handleFirebaseError(err) {\n    const errorCode = err.code || '';\n    switch (errorCode) {\n      case 'auth/invalid-login-credentials':\n      case 'auth/user-not-found':\n      case 'auth/wrong-password':\n        this.errorMsg = '‚ùå Invalid Credentials';\n        break;\n      case 'auth/email-already-in-use':\n        this.errorMsg = '‚ùå Email already in use';\n        break;\n      case 'auth/too-many-requests':\n        this.errorMsg = '‚ùå Too many attempts. Try again later.';\n        break;\n      default:\n        this.errorMsg = err.message || '‚ùå An unexpected error occurred';\n    }\n  }\n};\nAuthComponent = __decorate([Component({\n  selector: 'app-auth',\n  standalone: true,\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss'],\n  imports: [CommonModule, MatCheckboxModule, ReactiveFormsModule, MatButtonModule, MatFormFieldModule, MatInputModule, MatIconModule, RouterModule],\n  providers: [AuthService]\n})], AuthComponent);","map":{"version":3,"names":["Component","CommonModule","ReactiveFormsModule","Validators","MatButtonModule","MatFormFieldModule","MatInputModule","MatIconModule","RouterModule","AuthService","MatCheckboxModule","AuthComponent","constructor","fb","authService","router","isRegisterMode","errorMsg","showPassword","showConfirm","authForm","group","name","phone","email","required","password","minLength","confirmPassword","rememberMe","ngOnInit","rememberedEmail","localStorage","getItem","get","setValue","getUser","subscribe","user","navigate","toggleMode","reset","togglePasswordVisibility","toggleConfirmVisibility","onForgotPassword","event","preventDefault","value","console","log","sendPasswordResetEmail","then","catch","err","errorCode","code","onSubmit","_this","_asyncToGenerator","length","registerWithProfile","handleFirebaseError","login","remember","setItem","removeItem","message","__decorate","selector","standalone","templateUrl","styleUrls","imports","providers"],"sources":["/Users/vinithyareddy/Desktop/projects/my github projects/project-dashboard/src/app/auth/auth/auth.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { RouterModule, Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\n\n\n@Component({\n  selector: 'app-auth',\n  standalone: true,\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss'],\n  \n  imports: [\n    CommonModule,\n    MatCheckboxModule, \n    ReactiveFormsModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    RouterModule\n  ],\n  providers: [AuthService]\n  \n})\nexport class AuthComponent implements OnInit {\n  authForm: FormGroup;\n  isRegisterMode = false;\n  errorMsg = '';\n  showPassword = false;\n  showConfirm = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.authForm = this.fb.group({\n      name: [''],\n      phone: [''],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.minLength(6)]], // üëà only required in login/register flow\n      confirmPassword: [''],\n      rememberMe: [false] // üëà add this line\n\n    });\n  }\n\n  ngOnInit(): void {\n    const rememberedEmail = localStorage.getItem('rememberedEmail');\n    if (rememberedEmail) {\n      this.authForm.get('email')?.setValue(rememberedEmail);\n      this.authForm.get('rememberMe')?.setValue(true);\n    }\n  \n    this.authService.getUser().subscribe(user => {\n      if (user) {\n        this.router.navigate(['/dashboard']);\n      }\n    });\n  }\n\n  toggleMode() {\n    this.isRegisterMode = !this.isRegisterMode;\n    this.errorMsg = '';\n    this.authForm.get('password')?.reset();\n    this.authForm.get('confirmPassword')?.reset();\n  }\n\n  togglePasswordVisibility() {\n    this.showPassword = !this.showPassword;\n  }\n\n  toggleConfirmVisibility() {\n    this.showConfirm = !this.showConfirm;\n  }\n\n  onForgotPassword(event: Event) {\n    event.preventDefault();\n    const email = this.authForm.get('email')?.value;\n    console.log('üì© Forgot password triggered with email:', email); // <-- add this\n  \n    if (!email) {\n      this.errorMsg = '‚ùå Please enter your email to reset password';\n      return;\n    }\n  \n    this.authService.sendPasswordResetEmail(email)\n      .then(() => {\n        this.errorMsg = '‚úÖ Password reset link sent to your email';\n      })\n      .catch((err) => {\n        const errorCode = err.code || '';\n        switch (errorCode) {\n          case 'auth/invalid-email':\n            this.errorMsg = '‚ùå Invalid email format';\n            break;\n          case 'auth/user-not-found':\n            this.errorMsg = '‚ùå Email not found';\n            break;\n          default:\n            this.errorMsg = '‚ùå Failed to send reset email';\n        }\n      });\n  }\n  \n\n  async onSubmit() {\n    const { name, phone, email, password, confirmPassword } = this.authForm.value;\n\n    if (!email) {\n      this.errorMsg = '‚ùå Email is required';\n      return;\n    }\n\n    // Register Flow\n    if (this.isRegisterMode) {\n      if (!password || password.length < 6) {\n        this.errorMsg = '‚ùå Password must be at least 6 characters';\n        return;\n      }\n\n      if (password !== confirmPassword) {\n        this.errorMsg = '‚ùå Passwords do not match';\n        return;\n      }\n\n      try {\n        await this.authService.registerWithProfile({ name, phone, email, password });\n        this.errorMsg = '‚úÖ Account has been created';\n        this.router.navigate(['/dashboard']);\n      } catch (err: any) {\n        this.handleFirebaseError(err);\n      }\n\n      return;\n    }\n\n    // Login Flow\n    if (!password) {\n      this.errorMsg = '‚ùå Password is required';\n      return;\n    }\n\n    try {\n      await this.authService.login(email, password);\n        // ‚úÖ Remember Me Logic\n  const remember = this.authForm.get('rememberMe')?.value;\n  if (remember) {\n    localStorage.setItem('rememberedEmail', email);\n  } else {\n    localStorage.removeItem('rememberedEmail');\n  }\n\n\n      this.router.navigate(['/dashboard']);\n    } catch (err: any) {\n      this.handleFirebaseError(err);\n    }\n  }\n\n  private handleFirebaseError(err: any) {\n    const errorCode = err.code || '';\n    switch (errorCode) {\n      case 'auth/invalid-login-credentials':\n      case 'auth/user-not-found':\n      case 'auth/wrong-password':\n        this.errorMsg = '‚ùå Invalid Credentials';\n        break;\n      case 'auth/email-already-in-use':\n        this.errorMsg = '‚ùå Email already in use';\n        break;\n      case 'auth/too-many-requests':\n        this.errorMsg = '‚ùå Too many attempts. Try again later.';\n        break;\n      default:\n        this.errorMsg = err.message || '‚ùå An unexpected error occurred';\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}