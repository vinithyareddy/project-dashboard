{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatChipsModule } from '@angular/material/chips'; // For emails\nimport { DatePipe } from '@angular/common';\nimport { ThemeToggleComponent } from '../shared/theme-toggle/theme-toggle.component'; // Adjust the path\nexport let TeamsComponent = class TeamsComponent {\n  constructor(fb, datePipe) {\n    this.fb = fb;\n    this.datePipe = datePipe;\n    this.teamMembers = [\n    // Added IDs\n    {\n      id: 1,\n      name: 'Alice',\n      role: 'Designer',\n      emails: ['alice@company.org'],\n      avatarColor: '#4361ee'\n    }, {\n      id: 2,\n      name: 'Bob',\n      role: 'Frontend Developer',\n      emails: ['bob@company.org'],\n      avatarColor: '#7209b7'\n    }, {\n      id: 3,\n      name: 'Charlie',\n      role: 'Team Lead',\n      emails: ['charlie@company.org'],\n      avatarColor: '#4cc9f0'\n    }, {\n      id: 4,\n      name: 'Betty',\n      role: 'Software Engineer',\n      emails: ['betty@company.org'],\n      avatarColor: '#6831ee'\n    }, {\n      id: 5,\n      name: 'Cheryl',\n      role: 'Full Stack Developer',\n      emails: ['cheryl@company.org'],\n      avatarColor: '#654454'\n    }, {\n      id: 6,\n      name: 'Abhigail',\n      role: 'Backend Developer',\n      emails: ['abhigail@company.org'],\n      avatarColor: '#544423'\n    }, {\n      id: 7,\n      name: 'James',\n      role: 'Backend Developer',\n      emails: ['james@company.org'],\n      avatarColor: '#124444'\n    }, {\n      id: 8,\n      name: 'John',\n      role: 'Full Stack Developer',\n      emails: ['john@company.org'],\n      avatarColor: '#654644'\n    }, {\n      id: 9,\n      name: 'Veronica',\n      role: 'Software Developer',\n      emails: ['veronica@company.org'],\n      avatarColor: '#326944'\n    }, {\n      id: 10,\n      name: 'Archie',\n      role: 'Designer',\n      emails: ['archie@company.org'],\n      avatarColor: '#023543'\n    }, {\n      id: 11,\n      name: 'Bobby',\n      role: 'Software Engineer',\n      emails: ['bobby@company.org'],\n      avatarColor: '#245478'\n    }, {\n      id: 12,\n      name: 'Charles',\n      role: 'Team Manager',\n      emails: ['charles@company.org'],\n      avatarColor: '#ef4336'\n    }];\n    this.filteredTeamMembers = [];\n    this.isEditing = false;\n    this.editingMemberId = null;\n    this.nextId = 5;\n    // Filter properties\n    this.roleList = [];\n    this.filterName = '';\n    this.selectedRole = 'All';\n    this.showAllProjects = false;\n    this.showAllTasks = false;\n    this.showAllMembers = false;\n  }\n  ngOnInit() {\n    this.teamMemberForm = this.fb.group({\n      name: ['', Validators.required],\n      role: ['', Validators.required],\n      email: ['', Validators.email],\n      avatarColor: [this.getRandomColor()]\n    });\n    this.updateRoleList();\n    this.applyFilters(); // Initial load\n    console.log('Teams component initialized');\n  }\n  updateRoleList() {\n    const roles = new Set(this.teamMembers.map(member => member.role));\n    this.roleList = ['All', ...Array.from(roles).sort()];\n  }\n  applyFilters() {\n    let tempMembers = [...this.teamMembers];\n    // Filter by Name (case-insensitive)\n    if (this.filterName) {\n      const filterLower = this.filterName.toLowerCase();\n      tempMembers = tempMembers.filter(member => member.name.toLowerCase().includes(filterLower));\n    }\n    // Filter by Role\n    if (this.selectedRole && this.selectedRole !== 'All') {\n      tempMembers = tempMembers.filter(member => member.role === this.selectedRole);\n    }\n    this.filteredTeamMembers = tempMembers;\n  }\n  clearNameFilter() {\n    this.filterName = '';\n    this.applyFilters();\n  }\n  // --- CRUD Methods ---\n  showAddMemberForm() {\n    this.isEditing = true;\n    this.editingMemberId = null;\n    this.teamMemberForm.reset({\n      name: '',\n      role: '',\n      email: '',\n      avatarColor: this.getRandomColor()\n    });\n  }\n  editMember(member) {\n    this.isEditing = true;\n    this.editingMemberId = member.id;\n    this.teamMemberForm.patchValue({\n      name: member.name,\n      role: member.role,\n      email: member.emails.length > 0 ? member.emails[0] : '',\n      avatarColor: member.avatarColor\n    });\n  }\n  saveMember() {\n    if (this.teamMemberForm.invalid) {\n      return;\n    }\n    const formValue = this.teamMemberForm.value;\n    // Create an array with the email if it exists\n    const emails = formValue.email ? [formValue.email] : [];\n    if (this.editingMemberId !== null) {\n      // Update\n      const index = this.teamMembers.findIndex(m => m.id === this.editingMemberId);\n      if (index > -1) {\n        this.teamMembers[index] = {\n          ...this.teamMembers[index],\n          name: formValue.name,\n          role: formValue.role,\n          avatarColor: formValue.avatarColor,\n          emails: emails\n        };\n      }\n    } else {\n      // Add\n      const newMember = {\n        id: this.nextId++,\n        name: formValue.name,\n        role: formValue.role,\n        avatarColor: formValue.avatarColor,\n        emails: emails\n      };\n      this.teamMembers.push(newMember);\n    }\n    this.updateRoleList();\n    this.applyFilters();\n    this.cancelEdit();\n  }\n  // Updated delete method\n  deleteTeamMember(memberId) {\n    this.teamMembers = this.teamMembers.filter(m => m.id !== memberId);\n    if (this.editingMemberId === memberId) {\n      this.cancelEdit();\n    }\n    this.updateRoleList();\n    this.applyFilters();\n  }\n  cancelEdit() {\n    this.isEditing = false;\n    this.editingMemberId = null;\n    this.teamMemberForm.reset({\n      avatarColor: this.getRandomColor()\n    });\n  }\n  // Helper to get a random color for new members\n  getRandomColor() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n  toggleProjects() {\n    this.showAllProjects = !this.showAllProjects;\n  }\n  toggleTasks() {\n    this.showAllTasks = !this.showAllTasks;\n  }\n  toggleMembersDisplay() {\n    this.showAllMembers = !this.showAllMembers;\n  }\n};\nTeamsComponent = __decorate([Component({\n  selector: 'app-teams',\n  templateUrl: './teams.component.html',\n  styleUrls: ['./teams.component.scss'],\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, FormsModule, MatButtonModule, MatIconModule, MatFormFieldModule, MatInputModule, MatSelectModule, MatChipsModule, ThemeToggleComponent //\n  ],\n\n  providers: [DatePipe],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA] // Add CUSTOM_ELEMENTS_SCHEMA\n})], TeamsComponent);","map":{"version":3,"names":["Component","CUSTOM_ELEMENTS_SCHEMA","CommonModule","ReactiveFormsModule","Validators","FormsModule","MatButtonModule","MatIconModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatChipsModule","DatePipe","ThemeToggleComponent","TeamsComponent","constructor","fb","datePipe","teamMembers","id","name","role","emails","avatarColor","filteredTeamMembers","isEditing","editingMemberId","nextId","roleList","filterName","selectedRole","showAllProjects","showAllTasks","showAllMembers","ngOnInit","teamMemberForm","group","required","email","getRandomColor","updateRoleList","applyFilters","console","log","roles","Set","map","member","Array","from","sort","tempMembers","filterLower","toLowerCase","filter","includes","clearNameFilter","showAddMemberForm","reset","editMember","patchValue","length","saveMember","invalid","formValue","value","index","findIndex","m","newMember","push","cancelEdit","deleteTeamMember","memberId","letters","color","i","Math","floor","random","toggleProjects","toggleTasks","toggleMembersDisplay","__decorate","selector","templateUrl","styleUrls","standalone","imports","providers","schemas"],"sources":["/Users/vinithyareddy/Desktop/projects/my github projects/project-dashboard/src/app/teams/teams.component.ts"],"sourcesContent":["import { Component, OnInit, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatChipsModule } from '@angular/material/chips'; // For emails\nimport { DatePipe } from '@angular/common';\nimport { ThemeToggleComponent } from '../shared/theme-toggle/theme-toggle.component'; // Adjust the path\n\n\n\ninterface TeamMember {\n  id: number; // Add ID\n  name: string;\n  role: string;\n  emails: string[];\n  avatarColor: string;\n}\n\n@Component({\n  selector: 'app-teams',\n  templateUrl: './teams.component.html',\n  styleUrls: ['./teams.component.scss'],\n  standalone: true, // Make standalone\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatButtonModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatChipsModule, // Add\n    ThemeToggleComponent, //\n  ],\n  providers: [DatePipe],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA] // Add CUSTOM_ELEMENTS_SCHEMA\n})\nexport class TeamsComponent implements OnInit {\n  teamMembers: TeamMember[] = [\n    // Added IDs\n    { id: 1, name: 'Alice', role: 'Designer', emails: ['alice@company.org'], avatarColor: '#4361ee' },\n    { id: 2, name: 'Bob', role: 'Frontend Developer', emails: ['bob@company.org'], avatarColor: '#7209b7' },\n    { id: 3, name: 'Charlie', role: 'Team Lead', emails: ['charlie@company.org'], avatarColor: '#4cc9f0' },\n    { id: 4, name: 'Betty', role: 'Software Engineer', emails: ['betty@company.org'], avatarColor: '#6831ee' },\n    { id: 5, name: 'Cheryl', role: 'Full Stack Developer', emails: ['cheryl@company.org'], avatarColor: '#654454' },\n    { id: 6, name: 'Abhigail', role: 'Backend Developer', emails: ['abhigail@company.org'], avatarColor: '#544423' },\n    { id: 7, name: 'James', role: 'Backend Developer', emails: ['james@company.org'], avatarColor: '#124444' },\n    { id: 8, name: 'John', role: 'Full Stack Developer', emails: ['john@company.org'], avatarColor: '#654644' },\n    { id: 9, name: 'Veronica', role: 'Software Developer', emails: ['veronica@company.org'], avatarColor: '#326944' },\n    { id: 10, name: 'Archie', role: 'Designer', emails: ['archie@company.org'], avatarColor: '#023543' },\n    { id: 11, name: 'Bobby', role: 'Software Engineer', emails: ['bobby@company.org'], avatarColor: '#245478' },\n    { id: 12, name: 'Charles', role: 'Team Manager', emails: ['charles@company.org'], avatarColor: '#ef4336' }\n  ];\n\n  filteredTeamMembers: TeamMember[] = [];\n  teamMemberForm!: FormGroup;\n  isEditing = false;\n  editingMemberId: number | null = null;\n  nextId = 5;\n\n  // Filter properties\n  roleList: string[] = [];\n  filterName: string = '';\n  selectedRole: string = 'All';\n\n  showAllProjects = false;\n  showAllTasks = false;\n  showAllMembers = false;\n\n  constructor(private fb: FormBuilder, private datePipe: DatePipe) { }\n\n  ngOnInit() {\n    this.teamMemberForm = this.fb.group({\n      name: ['', Validators.required],\n      role: ['', Validators.required],\n      email: ['', Validators.email],\n      avatarColor: [this.getRandomColor()]\n    });\n    this.updateRoleList();\n    this.applyFilters(); // Initial load\n    console.log('Teams component initialized');\n  }\n\n  updateRoleList(): void {\n    const roles = new Set(this.teamMembers.map(member => member.role));\n    this.roleList = ['All', ...Array.from(roles).sort()];\n  }\n\n  applyFilters(): void {\n    let tempMembers = [...this.teamMembers];\n\n    // Filter by Name (case-insensitive)\n    if (this.filterName) {\n      const filterLower = this.filterName.toLowerCase();\n      tempMembers = tempMembers.filter(member => \n        member.name.toLowerCase().includes(filterLower)\n      );\n    }\n\n    // Filter by Role\n    if (this.selectedRole && this.selectedRole !== 'All') {\n      tempMembers = tempMembers.filter(member => member.role === this.selectedRole);\n    }\n\n    this.filteredTeamMembers = tempMembers;\n  }\n\n  clearNameFilter(): void {\n      this.filterName = '';\n      this.applyFilters();\n  }\n\n  // --- CRUD Methods ---\n  showAddMemberForm(): void {\n    this.isEditing = true;\n    this.editingMemberId = null;\n    this.teamMemberForm.reset({ \n      name: '',\n      role: '',\n      email: '',\n      avatarColor: this.getRandomColor() \n    });\n  }\n\n  editMember(member: TeamMember): void {\n    this.isEditing = true;\n    this.editingMemberId = member.id;\n    this.teamMemberForm.patchValue({\n      name: member.name,\n      role: member.role,\n      email: member.emails.length > 0 ? member.emails[0] : '', // Get first email if available\n      avatarColor: member.avatarColor\n    });\n  }\n\n  saveMember(): void {\n    if (this.teamMemberForm.invalid) {\n      return;\n    }\n    const formValue = this.teamMemberForm.value;\n    // Create an array with the email if it exists\n    const emails = formValue.email ? [formValue.email] : [];\n\n    if (this.editingMemberId !== null) {\n      // Update\n      const index = this.teamMembers.findIndex(m => m.id === this.editingMemberId);\n      if (index > -1) {\n        this.teamMembers[index] = {\n          ...this.teamMembers[index], // Keep existing ID\n          name: formValue.name,\n          role: formValue.role,\n          avatarColor: formValue.avatarColor,\n          emails: emails\n        };\n      }\n    } else {\n      // Add\n      const newMember: TeamMember = {\n        id: this.nextId++,\n        name: formValue.name,\n        role: formValue.role,\n        avatarColor: formValue.avatarColor,\n        emails: emails\n      };\n      this.teamMembers.push(newMember);\n    }\n\n    this.updateRoleList();\n    this.applyFilters();\n    this.cancelEdit();\n  }\n\n  // Updated delete method\n  deleteTeamMember(memberId: number): void { \n    this.teamMembers = this.teamMembers.filter(m => m.id !== memberId);\n    if (this.editingMemberId === memberId) {\n      this.cancelEdit();\n    }\n    this.updateRoleList();\n    this.applyFilters();\n  }\n\n  cancelEdit(): void {\n    this.isEditing = false;\n    this.editingMemberId = null;\n    this.teamMemberForm.reset({ avatarColor: this.getRandomColor() });\n  }\n\n  // Helper to get a random color for new members\n  getRandomColor(): string {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n  toggleProjects(): void {\n    this.showAllProjects = !this.showAllProjects;\n  }\n  \n  toggleTasks(): void {\n    this.showAllTasks = !this.showAllTasks;\n  }\n  \n  toggleMembersDisplay(): void {\n    this.showAllMembers = !this.showAllMembers;\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}