{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule, DatePipe } from '@angular/common';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { take } from 'rxjs';\nexport let TeamsComponent = class TeamsComponent {\n  constructor(fb, datePipe, firestoreService, refreshService) {\n    this.fb = fb;\n    this.datePipe = datePipe;\n    this.firestoreService = firestoreService;\n    this.refreshService = refreshService;\n    this.teamMembers = [];\n    this.filteredTeamMembers = [];\n    this.isEditing = false;\n    this.editingMemberId = null;\n    this.nextId = 1;\n    this.roleList = [];\n    this.filterName = '';\n    this.selectedRole = 'All';\n    this.showAllMembers = false;\n  }\n  ngOnInit() {\n    this.teamMemberForm = this.fb.group({\n      name: ['', Validators.required],\n      role: ['', Validators.required],\n      email: [''],\n      avatarColor: [this.getRandomColor()]\n    });\n    this.loadData();\n    this.refreshService.refresh$.subscribe(() => {\n      this.loadData();\n    });\n  }\n  loadData() {\n    this.firestoreService.getTeamMembers().pipe(take(1)).subscribe(members => {\n      this.teamMembers = members;\n      this.updateRoleList();\n      this.applyFilters();\n    });\n  }\n  updateRoleList() {\n    const roles = new Set(this.teamMembers.map(member => member.role));\n    this.roleList = ['All', ...Array.from(roles).sort()];\n  }\n  applyFilters() {\n    let tempMembers = [...this.teamMembers];\n    if (this.filterName) {\n      const filterLower = this.filterName.toLowerCase();\n      tempMembers = tempMembers.filter(member => member.name.toLowerCase().includes(filterLower));\n    }\n    if (this.selectedRole && this.selectedRole !== 'All') {\n      tempMembers = tempMembers.filter(member => member.role === this.selectedRole);\n    }\n    this.filteredTeamMembers = tempMembers;\n  }\n  clearNameFilter() {\n    this.filterName = '';\n    this.applyFilters();\n  }\n  showAddMemberForm() {\n    this.isEditing = true;\n    this.editingMemberId = null;\n    this.teamMemberForm.reset({\n      avatarColor: this.getRandomColor()\n    });\n  }\n  editMember(member) {\n    this.isEditing = true;\n    this.editingMemberId = member.id || null;\n    this.teamMemberForm.patchValue({\n      name: member.name,\n      role: member.role,\n      email: member.emails.length > 0 ? member.emails[0] : '',\n      avatarColor: member.avatarColor\n    });\n  }\n  saveMember() {\n    if (this.teamMemberForm.invalid) return;\n    const formValue = this.teamMemberForm.value;\n    const emails = formValue.email ? [formValue.email] : [];\n    const newMember = {\n      name: formValue.name,\n      role: formValue.role,\n      emails,\n      avatarColor: formValue.avatarColor\n    };\n    if (this.editingMemberId) {\n      this.firestoreService.updateTeamMember(this.editingMemberId, newMember).pipe(take(1)).subscribe(() => {\n        const index = this.teamMembers.findIndex(m => m.id === this.editingMemberId);\n        if (index > -1) this.teamMembers[index] = {\n          ...this.teamMembers[index],\n          ...newMember\n        };\n        this.afterChange();\n      });\n    } else {\n      this.firestoreService.addTeamMember(newMember).pipe(take(1)).subscribe(docRef => {\n        this.teamMembers.push({\n          id: docRef.id,\n          ...newMember\n        });\n        this.afterChange();\n      });\n    }\n  }\n  deleteTeamMember(memberId) {\n    this.firestoreService.deleteTeamMember(memberId).pipe(take(1)).subscribe(() => {\n      this.teamMembers = this.teamMembers.filter(m => m.id !== memberId);\n      this.afterChange();\n    });\n  }\n  afterChange() {\n    this.updateRoleList();\n    this.applyFilters();\n    this.cancelEdit();\n  }\n  cancelEdit() {\n    this.isEditing = false;\n    this.editingMemberId = null;\n    this.teamMemberForm.reset({\n      avatarColor: this.getRandomColor()\n    });\n  }\n  getRandomColor() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n  toggleMembersDisplay() {\n    this.showAllMembers = !this.showAllMembers;\n  }\n};\nTeamsComponent = __decorate([Component({\n  selector: 'app-teams',\n  templateUrl: './teams.component.html',\n  styleUrls: ['./teams.component.scss'],\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, FormsModule, MatButtonModule, MatIconModule, MatFormFieldModule, MatInputModule, MatSelectModule, MatChipsModule, ThemeToggleComponent],\n  providers: [DatePipe],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})], TeamsComponent);","map":{"version":3,"names":["Component","CUSTOM_ELEMENTS_SCHEMA","CommonModule","DatePipe","ReactiveFormsModule","Validators","FormsModule","MatButtonModule","MatIconModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatChipsModule","take","TeamsComponent","constructor","fb","datePipe","firestoreService","refreshService","teamMembers","filteredTeamMembers","isEditing","editingMemberId","nextId","roleList","filterName","selectedRole","showAllMembers","ngOnInit","teamMemberForm","group","name","required","role","email","avatarColor","getRandomColor","loadData","refresh$","subscribe","getTeamMembers","pipe","members","updateRoleList","applyFilters","roles","Set","map","member","Array","from","sort","tempMembers","filterLower","toLowerCase","filter","includes","clearNameFilter","showAddMemberForm","reset","editMember","id","patchValue","emails","length","saveMember","invalid","formValue","value","newMember","updateTeamMember","index","findIndex","m","afterChange","addTeamMember","docRef","push","deleteTeamMember","memberId","cancelEdit","letters","color","i","Math","floor","random","toggleMembersDisplay","__decorate","selector","templateUrl","styleUrls","standalone","imports","ThemeToggleComponent","providers","schemas"],"sources":["/Users/vinithyareddy/Desktop/projects/my github projects/project-dashboard/src/app/teams/teams.component.ts"],"sourcesContent":["import { Component, OnInit, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule, DatePipe } from '@angular/common';\nimport { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { FirestoreService } from '../services/firestore.service';\nimport { TeamMember } from '../models/team.model';\nimport { take } from 'rxjs';\nimport { RefreshService } from 'src/app/services/refresh.service';\n\n@Component({\n  selector: 'app-teams',\n  templateUrl: './teams.component.html',\n  styleUrls: ['./teams.component.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatButtonModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatChipsModule,\n    ThemeToggleComponent,\n  ],\n  providers: [DatePipe],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TeamsComponent implements OnInit {\n  teamMembers: TeamMember[] = [];\n  filteredTeamMembers: TeamMember[] = [];\n  teamMemberForm!: FormGroup;\n  isEditing = false;\n  editingMemberId: string | null = null;\n  nextId = 1;\n  roleList: string[] = [];\n  filterName: string = '';\n  selectedRole: string = 'All';\n  showAllMembers = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private datePipe: DatePipe,\n    private firestoreService: FirestoreService,\n    private refreshService: RefreshService\n  ) {}\n\n  ngOnInit(): void {\n    this.teamMemberForm = this.fb.group({\n      name: ['', Validators.required],\n      role: ['', Validators.required],\n      email: [''],\n      avatarColor: [this.getRandomColor()]\n    });\n\n    this.loadData();\n\n    this.refreshService.refresh$.subscribe(() => {\n      this.loadData();\n    });\n  }\n\n  loadData(): void {\n    this.firestoreService.getTeamMembers().pipe(take(1)).subscribe(members => {\n      this.teamMembers = members;\n      this.updateRoleList();\n      this.applyFilters();\n    });\n  }\n\n  updateRoleList(): void {\n    const roles = new Set(this.teamMembers.map(member => member.role));\n    this.roleList = ['All', ...Array.from(roles).sort()];\n  }\n\n  applyFilters(): void {\n    let tempMembers = [...this.teamMembers];\n    if (this.filterName) {\n      const filterLower = this.filterName.toLowerCase();\n      tempMembers = tempMembers.filter(member => member.name.toLowerCase().includes(filterLower));\n    }\n    if (this.selectedRole && this.selectedRole !== 'All') {\n      tempMembers = tempMembers.filter(member => member.role === this.selectedRole);\n    }\n    this.filteredTeamMembers = tempMembers;\n  }\n\n  clearNameFilter(): void {\n    this.filterName = '';\n    this.applyFilters();\n  }\n\n  showAddMemberForm(): void {\n    this.isEditing = true;\n    this.editingMemberId = null;\n    this.teamMemberForm.reset({ avatarColor: this.getRandomColor() });\n  }\n\n  editMember(member: TeamMember): void {\n    this.isEditing = true;\n    this.editingMemberId = member.id || null;\n    this.teamMemberForm.patchValue({\n      name: member.name,\n      role: member.role,\n      email: member.emails.length > 0 ? member.emails[0] : '',\n      avatarColor: member.avatarColor\n    });\n  }\n\n  saveMember(): void {\n    if (this.teamMemberForm.invalid) return;\n\n    const formValue = this.teamMemberForm.value;\n    const emails = formValue.email ? [formValue.email] : [];\n    const newMember: TeamMember = {\n      name: formValue.name,\n      role: formValue.role,\n      emails,\n      avatarColor: formValue.avatarColor\n    };\n\n    if (this.editingMemberId) {\n      this.firestoreService.updateTeamMember(this.editingMemberId, newMember).pipe(take(1)).subscribe(() => {\n        const index = this.teamMembers.findIndex(m => m.id === this.editingMemberId);\n        if (index > -1) this.teamMembers[index] = { ...this.teamMembers[index], ...newMember };\n        this.afterChange();\n      });\n    } else {\n      this.firestoreService.addTeamMember(newMember).pipe(take(1)).subscribe(docRef => {\n        this.teamMembers.push({ id: docRef.id, ...newMember });\n        this.afterChange();\n      });\n    }\n  }\n\n  deleteTeamMember(memberId: string): void {\n    this.firestoreService.deleteTeamMember(memberId).pipe(take(1)).subscribe(() => {\n      this.teamMembers = this.teamMembers.filter(m => m.id !== memberId);\n      this.afterChange();\n    });\n  }\n\n  afterChange(): void {\n    this.updateRoleList();\n    this.applyFilters();\n    this.cancelEdit();\n  }\n\n  cancelEdit(): void {\n    this.isEditing = false;\n    this.editingMemberId = null;\n    this.teamMemberForm.reset({ avatarColor: this.getRandomColor() });\n  }\n\n  getRandomColor(): string {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n  toggleMembersDisplay(): void {\n    this.showAllMembers = !this.showAllMembers;\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAUC,sBAAsB,QAAQ,eAAe;AACzE,SAASC,YAAY,EAAEC,QAAQ,QAAQ,iBAAiB;AACxD,SAASC,mBAAmB,EAA0BC,UAAU,QAAQ,gBAAgB;AACxF,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,kBAAkB,QAAQ,8BAA8B;AACjE,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,cAAc,QAAQ,yBAAyB;AAGxD,SAASC,IAAI,QAAQ,MAAM;AAuBpB,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAYzBC,YACUC,EAAe,EACfC,QAAkB,EAClBC,gBAAkC,EAClCC,cAA8B;IAH9B,KAAAH,EAAE,GAAFA,EAAE;IACF,KAAAC,QAAQ,GAARA,QAAQ;IACR,KAAAC,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAC,cAAc,GAAdA,cAAc;IAfxB,KAAAC,WAAW,GAAiB,EAAE;IAC9B,KAAAC,mBAAmB,GAAiB,EAAE;IAEtC,KAAAC,SAAS,GAAG,KAAK;IACjB,KAAAC,eAAe,GAAkB,IAAI;IACrC,KAAAC,MAAM,GAAG,CAAC;IACV,KAAAC,QAAQ,GAAa,EAAE;IACvB,KAAAC,UAAU,GAAW,EAAE;IACvB,KAAAC,YAAY,GAAW,KAAK;IAC5B,KAAAC,cAAc,GAAG,KAAK;EAOnB;EAEHC,QAAQA,CAAA;IACN,IAAI,CAACC,cAAc,GAAG,IAAI,CAACd,EAAE,CAACe,KAAK,CAAC;MAClCC,IAAI,EAAE,CAAC,EAAE,EAAE3B,UAAU,CAAC4B,QAAQ,CAAC;MAC/BC,IAAI,EAAE,CAAC,EAAE,EAAE7B,UAAU,CAAC4B,QAAQ,CAAC;MAC/BE,KAAK,EAAE,CAAC,EAAE,CAAC;MACXC,WAAW,EAAE,CAAC,IAAI,CAACC,cAAc,EAAE;KACpC,CAAC;IAEF,IAAI,CAACC,QAAQ,EAAE;IAEf,IAAI,CAACnB,cAAc,CAACoB,QAAQ,CAACC,SAAS,CAAC,MAAK;MAC1C,IAAI,CAACF,QAAQ,EAAE;IACjB,CAAC,CAAC;EACJ;EAEAA,QAAQA,CAAA;IACN,IAAI,CAACpB,gBAAgB,CAACuB,cAAc,EAAE,CAACC,IAAI,CAAC7B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC2B,SAAS,CAACG,OAAO,IAAG;MACvE,IAAI,CAACvB,WAAW,GAAGuB,OAAO;MAC1B,IAAI,CAACC,cAAc,EAAE;MACrB,IAAI,CAACC,YAAY,EAAE;IACrB,CAAC,CAAC;EACJ;EAEAD,cAAcA,CAAA;IACZ,MAAME,KAAK,GAAG,IAAIC,GAAG,CAAC,IAAI,CAAC3B,WAAW,CAAC4B,GAAG,CAACC,MAAM,IAAIA,MAAM,CAACf,IAAI,CAAC,CAAC;IAClE,IAAI,CAACT,QAAQ,GAAG,CAAC,KAAK,EAAE,GAAGyB,KAAK,CAACC,IAAI,CAACL,KAAK,CAAC,CAACM,IAAI,EAAE,CAAC;EACtD;EAEAP,YAAYA,CAAA;IACV,IAAIQ,WAAW,GAAG,CAAC,GAAG,IAAI,CAACjC,WAAW,CAAC;IACvC,IAAI,IAAI,CAACM,UAAU,EAAE;MACnB,MAAM4B,WAAW,GAAG,IAAI,CAAC5B,UAAU,CAAC6B,WAAW,EAAE;MACjDF,WAAW,GAAGA,WAAW,CAACG,MAAM,CAACP,MAAM,IAAIA,MAAM,CAACjB,IAAI,CAACuB,WAAW,EAAE,CAACE,QAAQ,CAACH,WAAW,CAAC,CAAC;;IAE7F,IAAI,IAAI,CAAC3B,YAAY,IAAI,IAAI,CAACA,YAAY,KAAK,KAAK,EAAE;MACpD0B,WAAW,GAAGA,WAAW,CAACG,MAAM,CAACP,MAAM,IAAIA,MAAM,CAACf,IAAI,KAAK,IAAI,CAACP,YAAY,CAAC;;IAE/E,IAAI,CAACN,mBAAmB,GAAGgC,WAAW;EACxC;EAEAK,eAAeA,CAAA;IACb,IAAI,CAAChC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACmB,YAAY,EAAE;EACrB;EAEAc,iBAAiBA,CAAA;IACf,IAAI,CAACrC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACO,cAAc,CAAC8B,KAAK,CAAC;MAAExB,WAAW,EAAE,IAAI,CAACC,cAAc;IAAE,CAAE,CAAC;EACnE;EAEAwB,UAAUA,CAACZ,MAAkB;IAC3B,IAAI,CAAC3B,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,eAAe,GAAG0B,MAAM,CAACa,EAAE,IAAI,IAAI;IACxC,IAAI,CAAChC,cAAc,CAACiC,UAAU,CAAC;MAC7B/B,IAAI,EAAEiB,MAAM,CAACjB,IAAI;MACjBE,IAAI,EAAEe,MAAM,CAACf,IAAI;MACjBC,KAAK,EAAEc,MAAM,CAACe,MAAM,CAACC,MAAM,GAAG,CAAC,GAAGhB,MAAM,CAACe,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE;MACvD5B,WAAW,EAAEa,MAAM,CAACb;KACrB,CAAC;EACJ;EAEA8B,UAAUA,CAAA;IACR,IAAI,IAAI,CAACpC,cAAc,CAACqC,OAAO,EAAE;IAEjC,MAAMC,SAAS,GAAG,IAAI,CAACtC,cAAc,CAACuC,KAAK;IAC3C,MAAML,MAAM,GAAGI,SAAS,CAACjC,KAAK,GAAG,CAACiC,SAAS,CAACjC,KAAK,CAAC,GAAG,EAAE;IACvD,MAAMmC,SAAS,GAAe;MAC5BtC,IAAI,EAAEoC,SAAS,CAACpC,IAAI;MACpBE,IAAI,EAAEkC,SAAS,CAAClC,IAAI;MACpB8B,MAAM;MACN5B,WAAW,EAAEgC,SAAS,CAAChC;KACxB;IAED,IAAI,IAAI,CAACb,eAAe,EAAE;MACxB,IAAI,CAACL,gBAAgB,CAACqD,gBAAgB,CAAC,IAAI,CAAChD,eAAe,EAAE+C,SAAS,CAAC,CAAC5B,IAAI,CAAC7B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC2B,SAAS,CAAC,MAAK;QACnG,MAAMgC,KAAK,GAAG,IAAI,CAACpD,WAAW,CAACqD,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACZ,EAAE,KAAK,IAAI,CAACvC,eAAe,CAAC;QAC5E,IAAIiD,KAAK,GAAG,CAAC,CAAC,EAAE,IAAI,CAACpD,WAAW,CAACoD,KAAK,CAAC,GAAG;UAAE,GAAG,IAAI,CAACpD,WAAW,CAACoD,KAAK,CAAC;UAAE,GAAGF;QAAS,CAAE;QACtF,IAAI,CAACK,WAAW,EAAE;MACpB,CAAC,CAAC;KACH,MAAM;MACL,IAAI,CAACzD,gBAAgB,CAAC0D,aAAa,CAACN,SAAS,CAAC,CAAC5B,IAAI,CAAC7B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC2B,SAAS,CAACqC,MAAM,IAAG;QAC9E,IAAI,CAACzD,WAAW,CAAC0D,IAAI,CAAC;UAAEhB,EAAE,EAAEe,MAAM,CAACf,EAAE;UAAE,GAAGQ;QAAS,CAAE,CAAC;QACtD,IAAI,CAACK,WAAW,EAAE;MACpB,CAAC,CAAC;;EAEN;EAEAI,gBAAgBA,CAACC,QAAgB;IAC/B,IAAI,CAAC9D,gBAAgB,CAAC6D,gBAAgB,CAACC,QAAQ,CAAC,CAACtC,IAAI,CAAC7B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC2B,SAAS,CAAC,MAAK;MAC5E,IAAI,CAACpB,WAAW,GAAG,IAAI,CAACA,WAAW,CAACoC,MAAM,CAACkB,CAAC,IAAIA,CAAC,CAACZ,EAAE,KAAKkB,QAAQ,CAAC;MAClE,IAAI,CAACL,WAAW,EAAE;IACpB,CAAC,CAAC;EACJ;EAEAA,WAAWA,CAAA;IACT,IAAI,CAAC/B,cAAc,EAAE;IACrB,IAAI,CAACC,YAAY,EAAE;IACnB,IAAI,CAACoC,UAAU,EAAE;EACnB;EAEAA,UAAUA,CAAA;IACR,IAAI,CAAC3D,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACO,cAAc,CAAC8B,KAAK,CAAC;MAAExB,WAAW,EAAE,IAAI,CAACC,cAAc;IAAE,CAAE,CAAC;EACnE;EAEAA,cAAcA,CAAA;IACZ,MAAM6C,OAAO,GAAG,kBAAkB;IAClC,IAAIC,KAAK,GAAG,GAAG;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,KAAK,IAAID,OAAO,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;;IAElD,OAAOJ,KAAK;EACd;EAEAK,oBAAoBA,CAAA;IAClB,IAAI,CAAC5D,cAAc,GAAG,CAAC,IAAI,CAACA,cAAc;EAC5C;CACD;AA1IYd,cAAc,GAAA2E,UAAA,EApB1BzF,SAAS,CAAC;EACT0F,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB,CAAC;EACrCC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CACP5F,YAAY,EACZE,mBAAmB,EACnBE,WAAW,EACXC,eAAe,EACfC,aAAa,EACbC,kBAAkB,EAClBC,cAAc,EACdC,eAAe,EACfC,cAAc,EACdmF,oBAAoB,CACrB;EACDC,SAAS,EAAE,CAAC7F,QAAQ,CAAC;EACrB8F,OAAO,EAAE,CAAChG,sBAAsB;CACjC,CAAC,C,EACWa,cAAc,CA0I1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}