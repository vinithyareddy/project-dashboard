{"ast":null,"code":"import { collection, addDoc, updateDoc, deleteDoc, doc, getDocs } from '@angular/fire/firestore';\nimport { from, of, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"./auth.service\";\nexport class FirestoreService {\n  constructor(firestore, authService) {\n    this.firestore = firestore;\n    this.authService = authService;\n  }\n  getCollectionPath(type) {\n    return this.authService.getUser().pipe(switchMap(user => {\n      if (user?.uid) {\n        return of(`users/${user.uid}/${type}`);\n      }\n      return of('');\n    }));\n  }\n  // --------------------- TASKS ---------------------\n  addTask(task) {\n    return this.getCollectionPath('tasks').pipe(switchMap(path => from(addDoc(collection(this.firestore, path), task))));\n  }\n  updateTask(taskId, updates) {\n    return this.getCollectionPath('tasks').pipe(switchMap(path => from(updateDoc(doc(this.firestore, `${path}/${taskId}`), updates))));\n  }\n  deleteTask(taskId) {\n    return this.getCollectionPath('tasks').pipe(switchMap(path => from(deleteDoc(doc(this.firestore, `${path}/${taskId}`)))));\n  }\n  getTasks() {\n    return this.getCollectionPath('tasks').pipe(switchMap(path => from(getDocs(collection(this.firestore, path))).pipe(switchMap(snapshot => {\n      const tasks = snapshot.docs.map(docSnap => {\n        const data = docSnap.data();\n        return {\n          id: docSnap.id,\n          ...data,\n          dueDate: data['dueDate']?.toDate?.() || data['dueDate']\n        };\n      });\n      return of(tasks);\n    }))));\n  }\n  // --------------------- PROJECTS ---------------------\n  addProject(project) {\n    return this.getCollectionPath('projects').pipe(switchMap(path => from(addDoc(collection(this.firestore, path), project))));\n  }\n  updateProject(projectId, updates) {\n    return this.getCollectionPath('projects').pipe(switchMap(path => from(updateDoc(doc(this.firestore, `${path}/${projectId}`), updates))));\n  }\n  deleteProject(projectId) {\n    return this.getCollectionPath('projects').pipe(switchMap(path => from(deleteDoc(doc(this.firestore, `${path}/${projectId}`)))));\n  }\n  getProjects() {\n    return this.getCollectionPath('projects').pipe(switchMap(path => from(getDocs(collection(this.firestore, path))).pipe(switchMap(snapshot => {\n      const projects = snapshot.docs.map(docSnap => {\n        const data = docSnap.data();\n        return {\n          id: docSnap.id,\n          ...data,\n          dueDate: data['dueDate']?.toDate?.() || data['dueDate']\n        };\n      });\n      return of(projects);\n    }))));\n  }\n  // --------------------- TEAMS ---------------------\n  addTeamMember(member) {\n    return this.getCollectionPath('teams').pipe(switchMap(path => from(addDoc(collection(this.firestore, path), member))));\n  }\n  updateTeamMember(memberId, updates) {\n    return this.getCollectionPath('teams').pipe(switchMap(path => from(updateDoc(doc(this.firestore, `${path}/${memberId}`), updates))));\n  }\n  deleteTeamMember(memberId) {\n    return this.getCollectionPath('teams').pipe(switchMap(path => from(deleteDoc(doc(this.firestore, `${path}/${memberId}`)))));\n  }\n  getTeamMembers() {\n    return this.getCollectionPath('teams').pipe(switchMap(path => from(getDocs(collection(this.firestore, path))).pipe(switchMap(snapshot => {\n      const members = snapshot.docs.map(docSnap => ({\n        id: docSnap.id,\n        ...docSnap.data()\n      }));\n      return of(members);\n    }))));\n  }\n  static {\n    this.Éµfac = function FirestoreService_Factory(t) {\n      return new (t || FirestoreService)(i0.ÉµÉµinject(i1.Firestore), i0.ÉµÉµinject(i2.AuthService));\n    };\n  }\n  static {\n    this.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n      token: FirestoreService,\n      factory: FirestoreService.Éµfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["collection","addDoc","updateDoc","deleteDoc","doc","getDocs","from","of","switchMap","FirestoreService","constructor","firestore","authService","getCollectionPath","type","getUser","pipe","user","uid","addTask","task","path","updateTask","taskId","updates","deleteTask","getTasks","snapshot","tasks","docs","map","docSnap","data","id","dueDate","toDate","addProject","project","updateProject","projectId","deleteProject","getProjects","projects","addTeamMember","member","updateTeamMember","memberId","deleteTeamMember","getTeamMembers","members","i0","ÉµÉµinject","i1","Firestore","i2","AuthService","factory","Éµfac","providedIn"],"sources":["/Users/vinithyareddy/Desktop/projects/my github projects/project-dashboard/src/app/services/firestore.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  doc,\n  getDocs,\n  CollectionReference,\n  DocumentData\n} from '@angular/fire/firestore';\nimport { AuthService } from './auth.service';\nimport { Task } from '../models/task.model';\nimport { Project } from '../models/project.model';\nimport { TeamMember } from '../models/team.model'; // âœ… Make sure this file exists!\nimport { from, Observable, of, switchMap } from 'rxjs';\nimport { Timestamp } from '@angular/fire/firestore'; // ðŸ‘ˆ ensure this is imported\n\n\n@Injectable({ providedIn: 'root' })\nexport class FirestoreService {\n  constructor(private firestore: Firestore, private authService: AuthService) {}\n\n  private getCollectionPath(type: 'tasks' | 'projects' | 'teams'): Observable<string> {\n    return this.authService.getUser().pipe(\n      switchMap((user: any) => {\n        if (user?.uid) {\n          return of(`users/${user.uid}/${type}`);\n        }\n        return of('');\n      })\n    );\n  }\n\n  // --------------------- TASKS ---------------------\n  addTask(task: Task): Observable<any> {\n    return this.getCollectionPath('tasks').pipe(\n      switchMap((path) => from(addDoc(collection(this.firestore, path), task)))\n    );\n  }\n\n  updateTask(taskId: string, updates: Partial<Task>): Observable<any> {\n    return this.getCollectionPath('tasks').pipe(\n      switchMap((path) => from(updateDoc(doc(this.firestore, `${path}/${taskId}`), updates)))\n    );\n  }\n\n  deleteTask(taskId: string): Observable<any> {\n    return this.getCollectionPath('tasks').pipe(\n      switchMap((path) => from(deleteDoc(doc(this.firestore, `${path}/${taskId}`))))\n    );\n  }\n\n  getTasks(): Observable<Task[]> {\n    return this.getCollectionPath('tasks').pipe(\n      switchMap((path) =>\n        from(getDocs(collection(this.firestore, path))).pipe(\n          switchMap(snapshot => {\n            const tasks: Task[] = snapshot.docs.map(docSnap => {\n              const data: any = docSnap.data();\n              return {\n                id: docSnap.id,\n                ...data,\n                dueDate: data['dueDate']?.toDate?.() || data['dueDate']\n              } as Task;\n            });\n            return of(tasks);\n          })\n        )\n      )\n    );\n  }\n  \n  \n  \n  // --------------------- PROJECTS ---------------------\n  addProject(project: Project): Observable<any> {\n    return this.getCollectionPath('projects').pipe(\n      switchMap((path) => from(addDoc(collection(this.firestore, path), project)))\n    );\n  }\n\n  updateProject(projectId: string, updates: Partial<Project>): Observable<any> {\n    return this.getCollectionPath('projects').pipe(\n      switchMap((path) => from(updateDoc(doc(this.firestore, `${path}/${projectId}`), updates)))\n    );\n  }\n\n  deleteProject(projectId: string): Observable<any> {\n    return this.getCollectionPath('projects').pipe(\n      switchMap((path) => from(deleteDoc(doc(this.firestore, `${path}/${projectId}`))))\n    );\n  }\n\n  getProjects(): Observable<Project[]> {\n    return this.getCollectionPath('projects').pipe(\n      switchMap((path) =>\n        from(getDocs(collection(this.firestore, path))).pipe(\n          switchMap(snapshot => {\n            const projects: Project[] = snapshot.docs.map(docSnap => {\n              const data: any = docSnap.data();\n              return {\n                id: docSnap.id,\n                ...data,\n                dueDate: data['dueDate']?.toDate?.() || data['dueDate']\n              } as Project;\n            });\n            return of(projects);\n          })\n        )\n      )\n    );\n  }\n  \n  // --------------------- TEAMS ---------------------\n  addTeamMember(member: TeamMember): Observable<any> {\n    return this.getCollectionPath('teams').pipe(\n      switchMap((path) => from(addDoc(collection(this.firestore, path), member)))\n    );\n  }\n\n  updateTeamMember(memberId: string, updates: Partial<TeamMember>): Observable<any> {\n    return this.getCollectionPath('teams').pipe(\n      switchMap((path) => from(updateDoc(doc(this.firestore, `${path}/${memberId}`), updates)))\n    );\n  }\n\n  deleteTeamMember(memberId: string): Observable<any> {\n    return this.getCollectionPath('teams').pipe(\n      switchMap((path) => from(deleteDoc(doc(this.firestore, `${path}/${memberId}`))))\n    );\n  }\n\n  getTeamMembers(): Observable<TeamMember[]> {\n    return this.getCollectionPath('teams').pipe(\n      switchMap((path) =>\n        from(getDocs(collection(this.firestore, path))).pipe(\n          switchMap(snapshot => {\n            const members: TeamMember[] = snapshot.docs.map(docSnap => ({\n              id: docSnap.id,\n              ...docSnap.data()\n            }) as TeamMember);\n            return of(members);\n          })\n        )\n      )\n    );\n  }\n  \n}\n"],"mappings":"AACA,SAEEA,UAAU,EACVC,MAAM,EACNC,SAAS,EACTC,SAAS,EACTC,GAAG,EACHC,OAAO,QAGF,yBAAyB;AAKhC,SAASC,IAAI,EAAcC,EAAE,EAAEC,SAAS,QAAQ,MAAM;;;;AAKtD,OAAM,MAAOC,gBAAgB;EAC3BC,YAAoBC,SAAoB,EAAUC,WAAwB;IAAtD,KAAAD,SAAS,GAATA,SAAS;IAAqB,KAAAC,WAAW,GAAXA,WAAW;EAAgB;EAErEC,iBAAiBA,CAACC,IAAoC;IAC5D,OAAO,IAAI,CAACF,WAAW,CAACG,OAAO,EAAE,CAACC,IAAI,CACpCR,SAAS,CAAES,IAAS,IAAI;MACtB,IAAIA,IAAI,EAAEC,GAAG,EAAE;QACb,OAAOX,EAAE,CAAC,SAASU,IAAI,CAACC,GAAG,IAAIJ,IAAI,EAAE,CAAC;;MAExC,OAAOP,EAAE,CAAC,EAAE,CAAC;IACf,CAAC,CAAC,CACH;EACH;EAEA;EACAY,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACP,iBAAiB,CAAC,OAAO,CAAC,CAACG,IAAI,CACzCR,SAAS,CAAEa,IAAI,IAAKf,IAAI,CAACL,MAAM,CAACD,UAAU,CAAC,IAAI,CAACW,SAAS,EAAEU,IAAI,CAAC,EAAED,IAAI,CAAC,CAAC,CAAC,CAC1E;EACH;EAEAE,UAAUA,CAACC,MAAc,EAAEC,OAAsB;IAC/C,OAAO,IAAI,CAACX,iBAAiB,CAAC,OAAO,CAAC,CAACG,IAAI,CACzCR,SAAS,CAAEa,IAAI,IAAKf,IAAI,CAACJ,SAAS,CAACE,GAAG,CAAC,IAAI,CAACO,SAAS,EAAE,GAAGU,IAAI,IAAIE,MAAM,EAAE,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC,CACxF;EACH;EAEAC,UAAUA,CAACF,MAAc;IACvB,OAAO,IAAI,CAACV,iBAAiB,CAAC,OAAO,CAAC,CAACG,IAAI,CACzCR,SAAS,CAAEa,IAAI,IAAKf,IAAI,CAACH,SAAS,CAACC,GAAG,CAAC,IAAI,CAACO,SAAS,EAAE,GAAGU,IAAI,IAAIE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAC/E;EACH;EAEAG,QAAQA,CAAA;IACN,OAAO,IAAI,CAACb,iBAAiB,CAAC,OAAO,CAAC,CAACG,IAAI,CACzCR,SAAS,CAAEa,IAAI,IACbf,IAAI,CAACD,OAAO,CAACL,UAAU,CAAC,IAAI,CAACW,SAAS,EAAEU,IAAI,CAAC,CAAC,CAAC,CAACL,IAAI,CAClDR,SAAS,CAACmB,QAAQ,IAAG;MACnB,MAAMC,KAAK,GAAWD,QAAQ,CAACE,IAAI,CAACC,GAAG,CAACC,OAAO,IAAG;QAChD,MAAMC,IAAI,GAAQD,OAAO,CAACC,IAAI,EAAE;QAChC,OAAO;UACLC,EAAE,EAAEF,OAAO,CAACE,EAAE;UACd,GAAGD,IAAI;UACPE,OAAO,EAAEF,IAAI,CAAC,SAAS,CAAC,EAAEG,MAAM,GAAE,CAAE,IAAIH,IAAI,CAAC,SAAS;SAC/C;MACX,CAAC,CAAC;MACF,OAAOzB,EAAE,CAACqB,KAAK,CAAC;IAClB,CAAC,CAAC,CACH,CACF,CACF;EACH;EAIA;EACAQ,UAAUA,CAACC,OAAgB;IACzB,OAAO,IAAI,CAACxB,iBAAiB,CAAC,UAAU,CAAC,CAACG,IAAI,CAC5CR,SAAS,CAAEa,IAAI,IAAKf,IAAI,CAACL,MAAM,CAACD,UAAU,CAAC,IAAI,CAACW,SAAS,EAAEU,IAAI,CAAC,EAAEgB,OAAO,CAAC,CAAC,CAAC,CAC7E;EACH;EAEAC,aAAaA,CAACC,SAAiB,EAAEf,OAAyB;IACxD,OAAO,IAAI,CAACX,iBAAiB,CAAC,UAAU,CAAC,CAACG,IAAI,CAC5CR,SAAS,CAAEa,IAAI,IAAKf,IAAI,CAACJ,SAAS,CAACE,GAAG,CAAC,IAAI,CAACO,SAAS,EAAE,GAAGU,IAAI,IAAIkB,SAAS,EAAE,CAAC,EAAEf,OAAO,CAAC,CAAC,CAAC,CAC3F;EACH;EAEAgB,aAAaA,CAACD,SAAiB;IAC7B,OAAO,IAAI,CAAC1B,iBAAiB,CAAC,UAAU,CAAC,CAACG,IAAI,CAC5CR,SAAS,CAAEa,IAAI,IAAKf,IAAI,CAACH,SAAS,CAACC,GAAG,CAAC,IAAI,CAACO,SAAS,EAAE,GAAGU,IAAI,IAAIkB,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAClF;EACH;EAEAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAAC5B,iBAAiB,CAAC,UAAU,CAAC,CAACG,IAAI,CAC5CR,SAAS,CAAEa,IAAI,IACbf,IAAI,CAACD,OAAO,CAACL,UAAU,CAAC,IAAI,CAACW,SAAS,EAAEU,IAAI,CAAC,CAAC,CAAC,CAACL,IAAI,CAClDR,SAAS,CAACmB,QAAQ,IAAG;MACnB,MAAMe,QAAQ,GAAcf,QAAQ,CAACE,IAAI,CAACC,GAAG,CAACC,OAAO,IAAG;QACtD,MAAMC,IAAI,GAAQD,OAAO,CAACC,IAAI,EAAE;QAChC,OAAO;UACLC,EAAE,EAAEF,OAAO,CAACE,EAAE;UACd,GAAGD,IAAI;UACPE,OAAO,EAAEF,IAAI,CAAC,SAAS,CAAC,EAAEG,MAAM,GAAE,CAAE,IAAIH,IAAI,CAAC,SAAS;SAC5C;MACd,CAAC,CAAC;MACF,OAAOzB,EAAE,CAACmC,QAAQ,CAAC;IACrB,CAAC,CAAC,CACH,CACF,CACF;EACH;EAEA;EACAC,aAAaA,CAACC,MAAkB;IAC9B,OAAO,IAAI,CAAC/B,iBAAiB,CAAC,OAAO,CAAC,CAACG,IAAI,CACzCR,SAAS,CAAEa,IAAI,IAAKf,IAAI,CAACL,MAAM,CAACD,UAAU,CAAC,IAAI,CAACW,SAAS,EAAEU,IAAI,CAAC,EAAEuB,MAAM,CAAC,CAAC,CAAC,CAC5E;EACH;EAEAC,gBAAgBA,CAACC,QAAgB,EAAEtB,OAA4B;IAC7D,OAAO,IAAI,CAACX,iBAAiB,CAAC,OAAO,CAAC,CAACG,IAAI,CACzCR,SAAS,CAAEa,IAAI,IAAKf,IAAI,CAACJ,SAAS,CAACE,GAAG,CAAC,IAAI,CAACO,SAAS,EAAE,GAAGU,IAAI,IAAIyB,QAAQ,EAAE,CAAC,EAAEtB,OAAO,CAAC,CAAC,CAAC,CAC1F;EACH;EAEAuB,gBAAgBA,CAACD,QAAgB;IAC/B,OAAO,IAAI,CAACjC,iBAAiB,CAAC,OAAO,CAAC,CAACG,IAAI,CACzCR,SAAS,CAAEa,IAAI,IAAKf,IAAI,CAACH,SAAS,CAACC,GAAG,CAAC,IAAI,CAACO,SAAS,EAAE,GAAGU,IAAI,IAAIyB,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CACjF;EACH;EAEAE,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACnC,iBAAiB,CAAC,OAAO,CAAC,CAACG,IAAI,CACzCR,SAAS,CAAEa,IAAI,IACbf,IAAI,CAACD,OAAO,CAACL,UAAU,CAAC,IAAI,CAACW,SAAS,EAAEU,IAAI,CAAC,CAAC,CAAC,CAACL,IAAI,CAClDR,SAAS,CAACmB,QAAQ,IAAG;MACnB,MAAMsB,OAAO,GAAiBtB,QAAQ,CAACE,IAAI,CAACC,GAAG,CAACC,OAAO,KAAK;QAC1DE,EAAE,EAAEF,OAAO,CAACE,EAAE;QACd,GAAGF,OAAO,CAACC,IAAI;OAChB,CAAe,CAAC;MACjB,OAAOzB,EAAE,CAAC0C,OAAO,CAAC;IACpB,CAAC,CAAC,CACH,CACF,CACF;EACH;;;uBA/HWxC,gBAAgB,EAAAyC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,SAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAhB9C,gBAAgB;MAAA+C,OAAA,EAAhB/C,gBAAgB,CAAAgD,IAAA;MAAAC,UAAA,EADH;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}