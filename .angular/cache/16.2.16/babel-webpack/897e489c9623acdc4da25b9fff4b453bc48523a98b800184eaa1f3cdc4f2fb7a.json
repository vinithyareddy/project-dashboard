{"ast":null,"code":"import _asyncToGenerator from \"/Users/vinithyareddy/Desktop/projects/my github projects/project-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { RouterModule } from '@angular/router';\nimport { ChangePasswordDialogComponent } from 'src/app/change-password-dialog/change-password-dialog.component';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as XLSX from 'xlsx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/auth.service\";\nimport * as i2 from \"src/app/services/firestore.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/menu\";\nimport * as i9 from \"@angular/material/progress-spinner\";\nfunction HeaderComponent_mat_progress_spinner_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-progress-spinner\", 11);\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    \"success-msg\": a0,\n    \"error-msg\": a1\n  };\n};\nfunction HeaderComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(2, _c0, ctx_r1.fileMessage.includes(\"\\u2705\"), ctx_r1.fileMessage.includes(\"\\u274C\")));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.fileMessage, \" \");\n  }\n}\nfunction HeaderComponent_mat_progress_spinner_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-progress-spinner\", 11);\n  }\n}\nfunction HeaderComponent_ng_container_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"button\", 13)(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"account_circle\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"mat-menu\", null, 14)(6, \"button\", 15)(7, \"mat-icon\", 16);\n    i0.ɵɵtext(8, \"mail\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"span\")(10, \"strong\");\n    i0.ɵɵtext(11, \"Email:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function HeaderComponent_ng_container_11_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.openChangePasswordDialog());\n    });\n    i0.ɵɵelementStart(14, \"mat-icon\", 18);\n    i0.ɵɵtext(15, \"lock\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"span\");\n    i0.ɵɵtext(17, \"Change Password\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(18, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function HeaderComponent_ng_container_11_Template_button_click_18_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.logout());\n    });\n    i0.ɵɵelementStart(19, \"mat-icon\", 19);\n    i0.ɵɵtext(20, \"logout\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"span\");\n    i0.ɵɵtext(22, \"Logout\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const user_r6 = ctx.ngIf;\n    const _r7 = i0.ɵɵreference(5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matMenuTriggerFor\", _r7);\n    i0.ɵɵadvance(11);\n    i0.ɵɵtextInterpolate1(\" \", user_r6.email, \"\");\n  }\n}\nconst _c1 = function () {\n  return [\"/auth\"];\n};\nfunction HeaderComponent_ng_template_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 20)(1, \"mat-icon\", 21);\n    i0.ɵɵtext(2, \"login\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(1, _c1));\n  }\n}\nexport let HeaderComponent = /*#__PURE__*/(() => {\n  class HeaderComponent {\n    constructor(authService, firestoreService, router, snackBar) {\n      this.authService = authService;\n      this.firestoreService = firestoreService;\n      this.router = router;\n      this.snackBar = snackBar;\n      this.isUploading = false;\n      this.fileMessage = '';\n      this.dialog = inject(MatDialog);\n      this.user$ = authService.getUser();\n    }\n    logout() {\n      this.authService.logout().then(() => this.router.navigate(['/auth']));\n    }\n    openChangePasswordDialog() {\n      this.dialog.open(ChangePasswordDialogComponent, {\n        width: '600px',\n        maxWidth: '95vw',\n        panelClass: 'custom-dialog-container',\n        disableClose: false,\n        autoFocus: true\n      });\n    }\n    onFileUpload(event) {\n      var _this = this;\n      console.log('📁 File upload triggered');\n      this.isUploading = true;\n      const file = event.target.files[0];\n      if (!file) return;\n      const allowedTypes = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel', 'text/csv', 'application/csv'];\n      if (!allowedTypes.includes(file.type)) {\n        this.showError('❌ File type not supported. Please upload Excel or CSV.');\n        this.isUploading = false;\n        return;\n      }\n      const reader = new FileReader();\n      reader.onload = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (e) {\n          console.log('📖 FileReader loaded');\n          const data = new Uint8Array(e.target.result);\n          let workbook;\n          try {\n            if (file.type.includes('csv')) {\n              const text = new TextDecoder('utf-8').decode(data);\n              workbook = XLSX.read(text, {\n                type: 'string'\n              });\n              console.log('📄 CSV parsed');\n            } else {\n              workbook = XLSX.read(data, {\n                type: 'array'\n              });\n              console.log('📊 Excel parsed');\n            }\n            const [existingProjects, existingTasks, existingTeam] = yield Promise.all([_this.firestoreService.getProjects().toPromise().then(p => p || []), _this.firestoreService.getTasks().toPromise().then(t => t || []), _this.firestoreService.getTeamMembers().toPromise().then(tm => tm || [])]);\n            workbook.SheetNames.forEach(sheetName => {\n              const json = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);\n              console.log(`📋 Processing sheet: ${sheetName}`, json);\n              if (sheetName.toLowerCase().includes('project')) {\n                json.forEach(item => {\n                  if (!item.name || !item.dueDate) return _this.showError('❌ Skipped project with missing fields');\n                  const project = {\n                    name: item.name.trim(),\n                    assignee: item.assignee?.trim() || '',\n                    description: item.description || '',\n                    status: item.status || 'Not Started',\n                    dueDate: _this.convertToDate(item.dueDate)\n                  };\n                  const isDuplicate = existingProjects.some(p => p.name === project.name && _this.convertToDate(p.dueDate).getTime() === project.dueDate.getTime());\n                  if (!isDuplicate) {\n                    _this.firestoreService.addProject(project).subscribe({\n                      next: () => _this.showSuccess(`✅ Project \"${project.name}\" added`),\n                      error: () => _this.showError(`❌ Failed to upload project: ${project.name}`)\n                    });\n                  } else {\n                    _this.showError(`❌ Duplicate project: ${project.name}`);\n                  }\n                });\n              }\n              if (sheetName.toLowerCase().includes('task')) {\n                json.forEach(item => {\n                  if (!item.name || !item.dueDate || !item.assignee) return;\n                  const task = {\n                    name: _this.capitalize(item.name.trim()),\n                    assignee: _this.capitalize(item.assignee.trim()),\n                    dueDate: _this.convertToDate(item.dueDate),\n                    status: item.status || 'Not Started'\n                  };\n                  const isDuplicate = existingTasks.some(t => t.name === task.name && t.assignee === task.assignee && _this.convertToDate(t.dueDate).getTime() === _this.convertToDate(task.dueDate).getTime());\n                  if (!isDuplicate) {\n                    _this.firestoreService.addTask(task).subscribe({\n                      next: () => _this.showSuccess(`✅ Task \"${task.name}\" added`),\n                      error: () => _this.showError(`❌ Failed to upload task: ${task.name}`)\n                    });\n                  } else {\n                    _this.showError(`❌ Duplicate task: ${task.name}`);\n                  }\n                });\n              }\n              if (sheetName.toLowerCase().includes('team')) {\n                json.forEach(item => {\n                  if (!item.name || !item.role) return;\n                  const member = {\n                    name: _this.capitalize(item.name.trim()),\n                    role: _this.capitalize(item.role.trim()),\n                    emails: item.email ? [item.email.trim().toLowerCase()] : [],\n                    avatarColor: _this.getRandomColor()\n                  };\n                  const isDuplicate = existingTeam.some(m => m.name === member.name && m.role === member.role || member.emails.length && m.emails.includes(member.emails[0]));\n                  if (!isDuplicate) {\n                    _this.firestoreService.addTeamMember(member).subscribe({\n                      next: () => _this.showSuccess(`✅ Team Member \"${member.name}\" added`),\n                      error: () => _this.showError(`❌ Failed to upload team member: ${member.name}`)\n                    });\n                  } else {\n                    _this.showError(`❌ Duplicate team member: ${member.name}`);\n                  }\n                });\n              }\n            });\n            _this.showSuccess('✅ File uploaded and processed successfully.');\n          } catch (error) {\n            console.error('❌ Parsing failed', error);\n            _this.showError('❌ Failed to process the file.');\n          }\n          _this.isUploading = false;\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      reader.onerror = () => {\n        this.showError('❌ Error uploading file. Please try again.');\n        this.isUploading = false;\n      };\n      reader.readAsArrayBuffer(file);\n    }\n    convertToDate(value) {\n      if (!value) return new Date();\n      if (typeof value === 'object' && 'seconds' in value) return new Date(value.seconds * 1000);\n      const parsed = new Date(value);\n      return isNaN(parsed.getTime()) ? new Date() : parsed;\n    }\n    capitalize(text) {\n      return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n    }\n    getRandomColor() {\n      const letters = '0123456789ABCDEF';\n      return '#' + Array.from({\n        length: 6\n      }, () => letters[Math.floor(Math.random() * 16)]).join('');\n    }\n    showSuccess(message) {\n      this.snackBar.open(message, 'Close', {\n        duration: 4000,\n        panelClass: 'snackbar-success'\n      });\n    }\n    showError(message) {\n      this.snackBar.open(message, 'Close', {\n        duration: 4000,\n        panelClass: 'snackbar-error'\n      });\n    }\n    static {\n      this.ɵfac = function HeaderComponent_Factory(t) {\n        return new (t || HeaderComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.FirestoreService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: HeaderComponent,\n        selectors: [[\"app-header\"]],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 15,\n        vars: 7,\n        consts: [[1, \"header-toolbar\"], [1, \"spacer\"], [1, \"upload-container\"], [\"for\", \"file-upload\", 1, \"upload-icon\"], [\"id\", \"file-upload\", \"type\", \"file\", \"accept\", \".xlsx, .xls, .csv\", \"hidden\", \"\", 3, \"change\"], [\"matTooltip\", \"Upload Excel/CSV\"], [\"diameter\", \"24\", \"mode\", \"indeterminate\", \"color\", \"accent\", \"class\", \"upload-spinner\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngIf\"], [1, \"header-actions\"], [4, \"ngIf\", \"ngIfElse\"], [\"loginBtn\", \"\"], [\"diameter\", \"24\", \"mode\", \"indeterminate\", \"color\", \"accent\", 1, \"upload-spinner\"], [3, \"ngClass\"], [\"mat-icon-button\", \"\", \"matTooltip\", \"User Menu\", 3, \"matMenuTriggerFor\"], [\"userMenu\", \"matMenu\"], [\"mat-menu-item\", \"\", 1, \"user-info-item\"], [1, \"user-icon\"], [\"mat-menu-item\", \"\", 3, \"click\"], [\"matTooltip\", \"Change Password\", 1, \"user-icon\"], [\"matTooltip\", \"Logout\", 1, \"user-icon\"], [\"mat-icon-button\", \"\", \"matTooltip\", \"Login\", 3, \"routerLink\"], [\"matTooltip\", \"Login\"]],\n        template: function HeaderComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵelement(1, \"span\", 1);\n            i0.ɵɵelementStart(2, \"div\", 2)(3, \"label\", 3)(4, \"input\", 4);\n            i0.ɵɵlistener(\"change\", function HeaderComponent_Template_input_change_4_listener($event) {\n              return ctx.onFileUpload($event);\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(5, \"mat-icon\", 5);\n            i0.ɵɵtext(6, \"upload_file\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(7, HeaderComponent_mat_progress_spinner_7_Template, 1, 0, \"mat-progress-spinner\", 6);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(8, HeaderComponent_div_8_Template, 2, 5, \"div\", 7);\n            i0.ɵɵtemplate(9, HeaderComponent_mat_progress_spinner_9_Template, 1, 0, \"mat-progress-spinner\", 6);\n            i0.ɵɵelementStart(10, \"div\", 8);\n            i0.ɵɵtemplate(11, HeaderComponent_ng_container_11_Template, 23, 2, \"ng-container\", 9);\n            i0.ɵɵpipe(12, \"async\");\n            i0.ɵɵtemplate(13, HeaderComponent_ng_template_13_Template, 3, 2, \"ng-template\", null, 10, i0.ɵɵtemplateRefExtractor);\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            const _r4 = i0.ɵɵreference(14);\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"ngIf\", ctx.isUploading);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.fileMessage);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.isUploading);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(12, 5, ctx.user$))(\"ngIfElse\", _r4);\n          }\n        },\n        dependencies: [CommonModule, i5.NgClass, i5.NgIf, i5.AsyncPipe, MatToolbarModule, MatIconModule, i6.MatIcon, MatButtonModule, i7.MatIconButton, MatMenuModule, i8.MatMenu, i8.MatMenuItem, i8.MatMenuTrigger, MatDialogModule, RouterModule, i3.RouterLink, MatDividerModule, MatProgressSpinnerModule, i9.MatProgressSpinner],\n        styles: [\".upload-icon[_ngcontent-%COMP%]{cursor:pointer;margin-right:1rem;color:var(--accent-color)}.success-msg[_ngcontent-%COMP%]{color:green;font-size:14px;margin-left:10px}.error-msg[_ngcontent-%COMP%]{color:red;font-size:14px;margin-left:10px}.header-toolbar[_ngcontent-%COMP%]{position:fixed;top:0;left:0;right:0;z-index:1000;color:#000;height:64px;display:flex;margin-right:100px;margin-bottom:30px}.header-toolbar[_ngcontent-%COMP%]   .header-actions[_ngcontent-%COMP%]{display:flex;align-items:center;gap:1rem;margin-left:auto}.header-toolbar[_ngcontent-%COMP%]   .mat-icon-button[_ngcontent-%COMP%]{color:#c31919}.header-toolbar[_ngcontent-%COMP%]   .user-info[_ngcontent-%COMP%]{padding:.5rem 0;border-bottom:1px solid #e0e0e0;margin-bottom:.5rem}.header-toolbar[_ngcontent-%COMP%]   .user-info[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0;font-size:14px;color:#333}.header-toolbar[_ngcontent-%COMP%]   .mat-menu-panel[_ngcontent-%COMP%]{background-color:#fff!important;color:#eae3e3!important;padding:.5rem 1rem;border-radius:12px;box-shadow:0 4px 10px #00000026;min-width:250px}.header-toolbar[_ngcontent-%COMP%]   .mat-menu-content[_ngcontent-%COMP%]{padding:0}mat-icon[_ngcontent-%COMP%]{font-size:42px;width:42px;height:42px;margin-right:.5rem;color:#555!important}  .mat-menu-panel{background-color:#fff!important;color:#1a1a1a!important;padding:.5rem 1rem;border-radius:12px;box-shadow:0 4px 10px #00000026;min-width:260px}  .user-info{padding:.5rem 0;border-bottom:1px solid #e0e0e0;margin-bottom:.5rem}  .user-info p{margin:0;font-size:14px;color:#1a1a1a!important}  .mat-menu-item{font-size:14px;color:#333!important}  .mat-menu-item mat-icon{color:#666!important;margin-right:.5rem}.user-info-item[_ngcontent-%COMP%]{display:flex;align-items:center;padding-left:12px;margin-bottom:6px;gap:8px}.user-info-item[_ngcontent-%COMP%]   mat-icon.user-icon[_ngcontent-%COMP%]{font-size:18px!important;color:#666!important;min-width:20px;text-align:center}.user-info-item[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-size:13px;color:#333;line-height:1.4}.user-icon[_ngcontent-%COMP%]{font-size:18px!important;color:#666!important}  .mat-menu-item{display:flex;align-items:center;gap:8px;font-size:14px;padding:6px 16px;color:#333}  .mat-menu-item mat-icon.user-icon{font-size:18px!important;min-width:20px;color:#555!important}  .mat-menu-item span{font-size:13px;line-height:1.3;color:#333}  .custom-dialog-container{padding:24px!important;border-radius:12px;box-sizing:border-box;overflow:hidden}  .custom-dialog-container .mat-dialog-container{padding:24px!important}  .change-password-container{display:flex;flex-direction:column;gap:1.2rem}  .change-password-container h2{font-size:20px;margin-bottom:.5rem}  .change-password-container mat-form-field{width:100%}  .change-password-container .actions{display:flex;justify-content:flex-end;gap:1rem}  .change-password-container .error-msg{color:red;font-size:14px}  .change-password-container .success-msg{color:green;font-size:14px}  .snackbar-success{background-color:#1abc9c!important;color:#fff!important;font-weight:500}  .snackbar-error{background-color:#e74c3c!important;color:#fff!important;font-weight:500}.upload-container[_ngcontent-%COMP%]{display:flex;align-items:center;gap:.5rem;margin-left:93%;margin-top:20px}.upload-container[_ngcontent-%COMP%]   .upload-icon[_ngcontent-%COMP%]{cursor:pointer;color:var(--accent-color);margin-left:20%}.upload-container[_ngcontent-%COMP%]   .upload-spinner[_ngcontent-%COMP%]{margin-left:4px}\"]\n      });\n    }\n  }\n  return HeaderComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}