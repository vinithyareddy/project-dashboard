{"ast":null,"code":"import { collection, addDoc, updateDoc, deleteDoc, doc, getDocs, setDoc } from '@angular/fire/firestore';\nimport { from, of, switchMap, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"./auth.service\";\nexport let FirestoreService = /*#__PURE__*/(() => {\n  class FirestoreService {\n    constructor(firestore, authService) {\n      this.firestore = firestore;\n      this.authService = authService;\n    }\n    getUserPath(type) {\n      return this.authService.getUser().pipe(switchMap(user => of(`users/${user?.uid}/${type}`)));\n    }\n    // ----------------- PROJECTS -----------------\n    addProject(project) {\n      return this.getUserPath('projects').pipe(switchMap(path => {\n        const docRef = doc(collection(this.firestore, path));\n        return from(setDoc(docRef, project)).pipe(map(() => ({\n          id: docRef.id\n        })));\n      }));\n    }\n    updateProject(id, updates) {\n      return this.getUserPath('projects').pipe(switchMap(path => from(updateDoc(doc(this.firestore, `${path}/${id}`), updates))));\n    }\n    deleteProject(id) {\n      return this.getUserPath('projects').pipe(switchMap(path => from(deleteDoc(doc(this.firestore, `${path}/${id}`)))));\n    }\n    getProjects() {\n      return this.getUserPath('projects').pipe(switchMap(path => from(getDocs(collection(this.firestore, path))).pipe(map(snapshot => snapshot.docs.map(docSnap => ({\n        id: docSnap.id,\n        ...docSnap.data(),\n        dueDate: docSnap.data()['dueDate']?.toDate?.() || docSnap.data()['dueDate']\n      }))))));\n    }\n    // ----------------- TASKS -----------------\n    addTask(task) {\n      return this.getUserPath('tasks').pipe(switchMap(path => from(addDoc(collection(this.firestore, path), task))));\n    }\n    updateTask(id, updates) {\n      return this.getUserPath('tasks').pipe(switchMap(path => from(updateDoc(doc(this.firestore, `${path}/${id}`), updates))));\n    }\n    deleteTask(id) {\n      return this.getUserPath('tasks').pipe(switchMap(path => from(deleteDoc(doc(this.firestore, `${path}/${id}`)))));\n    }\n    getTasks() {\n      return this.getUserPath('tasks').pipe(switchMap(path => from(getDocs(collection(this.firestore, path))).pipe(map(snapshot => snapshot.docs.map(docSnap => ({\n        id: docSnap.id,\n        ...docSnap.data(),\n        dueDate: docSnap.data()['dueDate']?.toDate?.() || docSnap.data()['dueDate']\n      }))))));\n    }\n    // ----------------- TEAMS -----------------\n    addTeamMember(member) {\n      return this.getUserPath('teams').pipe(switchMap(path => from(addDoc(collection(this.firestore, path), member))));\n    }\n    updateTeamMember(id, updates) {\n      return this.getUserPath('teams').pipe(switchMap(path => from(updateDoc(doc(this.firestore, `${path}/${id}`), updates))));\n    }\n    deleteTeamMember(id) {\n      return this.getUserPath('teams').pipe(switchMap(path => from(deleteDoc(doc(this.firestore, `${path}/${id}`)))));\n    }\n    getTeamMembers() {\n      return this.getUserPath('teams').pipe(switchMap(path => from(getDocs(collection(this.firestore, path))).pipe(map(snapshot => snapshot.docs.map(docSnap => ({\n        id: docSnap.id,\n        ...docSnap.data()\n      }))))));\n    }\n    static {\n      this.ɵfac = function FirestoreService_Factory(t) {\n        return new (t || FirestoreService)(i0.ɵɵinject(i1.Firestore), i0.ɵɵinject(i2.AuthService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: FirestoreService,\n        factory: FirestoreService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return FirestoreService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}