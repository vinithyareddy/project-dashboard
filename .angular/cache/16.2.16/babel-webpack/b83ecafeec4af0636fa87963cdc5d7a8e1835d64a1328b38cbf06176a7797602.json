{"ast":null,"code":"import _asyncToGenerator from \"/Users/vinithyareddy/Desktop/projects/my github projects/project-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged, updateProfile, reauthenticateWithCredential, EmailAuthProvider, updatePassword } from '@angular/fire/auth';\nimport { sendPasswordResetEmail } from '@angular/fire/auth';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(auth, ngZone) {\n      this.auth = auth;\n      this.ngZone = ngZone;\n      this.userSubject = new BehaviorSubject(null);\n      this.INACTIVITY_LIMIT = 15 * 60 * 1000; // 15 minutes\n      onAuthStateChanged(this.auth, user => {\n        this.userSubject.next(user);\n        if (user) {\n          this.resetInactivityTimer();\n        } else {\n          this.clearInactivityTimer();\n        }\n      });\n      this.startInactivityWatch();\n    }\n    getUser() {\n      return this.userSubject.asObservable();\n    }\n    getCurrentUser() {\n      return this.auth.currentUser;\n    }\n    login(email, password) {\n      return signInWithEmailAndPassword(this.auth, email, password);\n    }\n    register(email, password, name, phone) {\n      var _this = this;\n      return createUserWithEmailAndPassword(this.auth, email, password).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* ({\n          user\n        }) {\n          yield updateProfile(user, {\n            displayName: name,\n            photoURL: phone // Temporarily using photoURL for phone\n          });\n\n          _this.userSubject.next(user);\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n    registerWithProfile({\n      name,\n      phone,\n      email,\n      password\n    }) {\n      return this.register(email, password, name, phone);\n    }\n    updateUserPassword(currentPassword, newPassword) {\n      const user = this.auth.currentUser;\n      if (!user || !user.email) {\n        return Promise.reject('No user is currently logged in');\n      }\n      const credential = EmailAuthProvider.credential(user.email, currentPassword);\n      return reauthenticateWithCredential(user, credential).then(() => {\n        return updatePassword(user, newPassword);\n      });\n    }\n    // ✅ Updated to use Firebase SDK directly to avoid mismatch with AngularFire types\n    sendPasswordResetEmail(email) {\n      return sendPasswordResetEmail(this.auth, email);\n    }\n    logout() {\n      this.clearInactivityTimer();\n      return signOut(this.auth);\n    }\n    startInactivityWatch() {\n      ['mousemove', 'keydown', 'click'].forEach(event => {\n        window.addEventListener(event, () => this.resetInactivityTimer());\n      });\n    }\n    resetInactivityTimer() {\n      this.clearInactivityTimer();\n      this.inactivityTimer = setTimeout(() => {\n        this.ngZone.run(() => {\n          this.logout();\n          alert('You were logged out due to inactivity.');\n        });\n      }, this.INACTIVITY_LIMIT);\n    }\n    clearInactivityTimer() {\n      if (this.inactivityTimer) {\n        clearTimeout(this.inactivityTimer);\n        this.inactivityTimer = null;\n      }\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.Auth), i0.ɵɵinject(i0.NgZone));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}